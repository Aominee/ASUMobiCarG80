
puttingTogether1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000140  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000b54  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000465  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000657  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000278  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000034b  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000060a  00000000  00000000  0000258b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000e0  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	85 00       	.word	0x0085	; ????
  56:	71 00       	.word	0x0071	; ????
  58:	71 00       	.word	0x0071	; ????
  5a:	71 00       	.word	0x0071	; ????
  5c:	7e 00       	.word	0x007e	; ????
  5e:	8c 00       	.word	0x008c	; ????
  60:	9a 00       	.word	0x009a	; ????
  62:	93 00       	.word	0x0093	; ????
  64:	a1 00       	.word	0x00a1	; ????
  66:	71 00       	.word	0x0071	; ????
  68:	71 00       	.word	0x0071	; ????
  6a:	71 00       	.word	0x0071	; ????
  6c:	71 00       	.word	0x0071	; ????
  6e:	71 00       	.word	0x0071	; ????
  70:	71 00       	.word	0x0071	; ????
  72:	71 00       	.word	0x0071	; ????
  74:	71 00       	.word	0x0071	; ????
  76:	a8 00       	.word	0x00a8	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf e5       	ldi	r28, 0x5F	; 95
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <driver_init>:

#include "MotorDriver.h"

void driver_init()
{
	SET_BIT(DDRA,ML_IN1);
  90:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,ML_IN2);
  92:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,MR_IN1);
  94:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,MR_IN2);
  96:	d3 9a       	sbi	0x1a, 3	; 26
  98:	08 95       	ret

0000009a <set_direction_ML>:
}
void set_direction_ML(uint8 direction)
{
	if(direction == CW)
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	19 f4       	brne	.+6      	; 0xa4 <set_direction_ML+0xa>
	{
		CLEAR_BIT(PORTA, ML_IN1);
  9e:	d8 98       	cbi	0x1b, 0	; 27
		SET_BIT(PORTA, ML_IN2);
  a0:	d9 9a       	sbi	0x1b, 1	; 27
  a2:	08 95       	ret
	}
	else if (direction == ACW)
  a4:	81 11       	cpse	r24, r1
  a6:	02 c0       	rjmp	.+4      	; 0xac <set_direction_ML+0x12>
	{
		SET_BIT(PORTA, ML_IN1);
  a8:	d8 9a       	sbi	0x1b, 0	; 27
		CLEAR_BIT(PORTA, ML_IN2);
  aa:	d9 98       	cbi	0x1b, 1	; 27
  ac:	08 95       	ret

000000ae <set_direction_MR>:
	} 
}
void set_direction_MR(uint8 direction)
{
	if(direction == CW)
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	19 f4       	brne	.+6      	; 0xb8 <set_direction_MR+0xa>
	{
		CLEAR_BIT(PORTA, MR_IN1);
  b2:	da 98       	cbi	0x1b, 2	; 27
		SET_BIT(PORTA, MR_IN2);
  b4:	db 9a       	sbi	0x1b, 3	; 27
  b6:	08 95       	ret
	}
	else if (direction == ACW)
  b8:	81 11       	cpse	r24, r1
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <set_direction_MR+0x12>
	{
		
		SET_BIT(PORTA, MR_IN1);
  bc:	da 9a       	sbi	0x1b, 2	; 27
		CLEAR_BIT(PORTA, MR_IN2);
  be:	db 98       	cbi	0x1b, 3	; 27
  c0:	08 95       	ret

000000c2 <init>:
	}
}

void init()
{
	Timer0_PC_PWMinit();
  c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <Timer0_PC_PWMinit>
	Timer2_PC_PWMinit();
  c6:	0e 94 ac 01 	call	0x358	; 0x358 <Timer2_PC_PWMinit>
	driver_init();	
  ca:	0e 94 48 00 	call	0x90	; 0x90 <driver_init>
	UART_init(9600);
  ce:	60 e8       	ldi	r22, 0x80	; 128
  d0:	75 e2       	ldi	r23, 0x25	; 37
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <UART_init>
  da:	08 95       	ret

000000dc <main>:

#include "puttingTogether1.h"

int main(void)
{
	init();
  dc:	0e 94 61 00 	call	0xc2	; 0xc2 <init>
	SET_BIT(DDRA,PA4);
  e0:	d4 9a       	sbi	0x1a, 4	; 26
	while(1)
	{
		uint8 cmd = UART_receive();
  e2:	0e 94 04 02 	call	0x408	; 0x408 <UART_receive>
		switch(cmd)
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	e2 54       	subi	r30, 0x42	; 66
  ec:	f1 09       	sbc	r31, r1
  ee:	e2 31       	cpi	r30, 0x12	; 18
  f0:	f1 05       	cpc	r31, r1
  f2:	b8 f7       	brcc	.-18     	; 0xe2 <main+0x6>
  f4:	e6 5d       	subi	r30, 0xD6	; 214
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__tablejump2__>
		{
			case FORWARD:
			Forward(100);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	92 e4       	ldi	r25, 0x42	; 66
 104:	0e 94 ab 00 	call	0x156	; 0x156 <Forward>
			break;
 108:	ec cf       	rjmp	.-40     	; 0xe2 <main+0x6>
			case BACK:
			Backward(100);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	88 ec       	ldi	r24, 0xC8	; 200
 110:	92 e4       	ldi	r25, 0x42	; 66
 112:	0e 94 bd 00 	call	0x17a	; 0x17a <Backward>
			break;
 116:	e5 cf       	rjmp	.-54     	; 0xe2 <main+0x6>
			case FORWARDLEFT:
			ForwardLeft(100);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	88 ec       	ldi	r24, 0xC8	; 200
 11e:	92 e4       	ldi	r25, 0x42	; 66
 120:	0e 94 03 01 	call	0x206	; 0x206 <ForwardLeft>
			break;
 124:	de cf       	rjmp	.-68     	; 0xe2 <main+0x6>
			case FORWARDRIGHT:
			ForwardRight(100);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	88 ec       	ldi	r24, 0xC8	; 200
 12c:	92 e4       	ldi	r25, 0x42	; 66
 12e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ForwardRight>
			break;
 132:	d7 cf       	rjmp	.-82     	; 0xe2 <main+0x6>
			case BACKLEFT:
			BackwardLeft(100);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	88 ec       	ldi	r24, 0xC8	; 200
 13a:	92 e4       	ldi	r25, 0x42	; 66
 13c:	0e 94 49 01 	call	0x292	; 0x292 <BackwardLeft>
			break;
 140:	d0 cf       	rjmp	.-96     	; 0xe2 <main+0x6>
			case BACKRIGHT:
			BackwardRight(100);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	92 e4       	ldi	r25, 0x42	; 66
 14a:	0e 94 26 01 	call	0x24c	; 0x24c <BackwardRight>
			break;
 14e:	c9 cf       	rjmp	.-110    	; 0xe2 <main+0x6>
			case STOP:
			Break();
 150:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Break>
			break;
 154:	c6 cf       	rjmp	.-116    	; 0xe2 <main+0x6>

00000156 <Forward>:
 */ 

#include "SteeringMech.h"

void Forward(float32 speed)
{
 156:	cf 93       	push	r28
	
	set_speed_ML(speed);
 158:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 15c:	c6 2f       	mov	r28, r22
 15e:	86 2f       	mov	r24, r22
 160:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_speed_MR(speed);
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_direction_ML(CW);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>
	set_direction_MR(CW);	
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <Backward>:
void Backward(float32 speed)
{
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	set_speed_ML(speed*0.1);
 186:	2d ec       	ldi	r18, 0xCD	; 205
 188:	3c ec       	ldi	r19, 0xCC	; 204
 18a:	4c ec       	ldi	r20, 0xCC	; 204
 18c:	5d e3       	ldi	r21, 0x3D	; 61
 18e:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 192:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 196:	86 2f       	mov	r24, r22
 198:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_speed_MR(speed);
 19c:	c7 01       	movw	r24, r14
 19e:	b6 01       	movw	r22, r12
 1a0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 1a4:	86 2f       	mov	r24, r22
 1a6:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_direction_ML(ACW);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>
	set_direction_MR(ACW);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
}
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <ForwardRight>:
void ForwardRight(float32 speed)
{
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	6b 01       	movw	r12, r22
 1ca:	7c 01       	movw	r14, r24
	
	set_speed_ML(speed);
 1cc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 1d0:	86 2f       	mov	r24, r22
 1d2:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_speed_MR(0.5*speed);
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	5f e3       	ldi	r21, 0x3F	; 63
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 1e6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 1ea:	86 2f       	mov	r24, r22
 1ec:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_direction_ML(CW);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>
	set_direction_MR(CW);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
	
}
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	08 95       	ret

00000206 <ForwardLeft>:
void ForwardLeft(float32 speed)
{
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
	
	set_speed_MR(speed);
 212:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 216:	86 2f       	mov	r24, r22
 218:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_speed_ML(speed*0.5);
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	5f e3       	ldi	r21, 0x3F	; 63
 224:	c7 01       	movw	r24, r14
 226:	b6 01       	movw	r22, r12
 228:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 22c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 230:	86 2f       	mov	r24, r22
 232:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_direction_MR(CW);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
	set_direction_ML(CW);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>

}
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <BackwardRight>:
void BackwardRight(float32 speed)
{
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	6b 01       	movw	r12, r22
 256:	7c 01       	movw	r14, r24
	
	set_speed_ML(speed);
 258:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 25c:	86 2f       	mov	r24, r22
 25e:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_speed_MR(0.5*speed);
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	5f e3       	ldi	r21, 0x3F	; 63
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 272:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 276:	86 2f       	mov	r24, r22
 278:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_direction_ML(ACW);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>
	set_direction_MR(ACW);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
	
}
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	08 95       	ret

00000292 <BackwardLeft>:
void BackwardLeft(float32 speed)
{
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
	
	set_speed_MR(speed);
 29e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 2a2:	86 2f       	mov	r24, r22
 2a4:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	set_speed_ML(speed*0.5);
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 2b8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 2bc:	86 2f       	mov	r24, r22
 2be:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_direction_MR(ACW);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 57 00 	call	0xae	; 0xae <set_direction_MR>
	set_direction_ML(ACW);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 4d 00 	call	0x9a	; 0x9a <set_direction_ML>

}
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	08 95       	ret

000002d8 <Break>:
	set_direction_ML(direction);
	set_direction_MR(direction);
}
void Break()
{
	set_speed_ML(0);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 90 01 	call	0x320	; 0x320 <set_speed_ML>
	set_speed_MR(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 c5 01 	call	0x38a	; 0x38a <set_speed_MR>
	/*
	CLEAR_BIT(PORTB, PB3);
	CLEAR_BIT(PORTD, PD7);
	*/
	
	TOGGLE_BIT(PORTA, PA4);
 2e4:	9b b3       	in	r25, 0x1b	; 27
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	89 27       	eor	r24, r25
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	08 95       	ret

000002ee <Timer0_PC_PWMinit>:
 */ 

#include "Timer0.h"
void Timer0_PC_PWMinit(void)
{
	TCNT0=0;	//count = 0 initially
 2ee:	12 be       	out	0x32, r1	; 50
	OCR0=0;		//compare match value = 0 initially
 2f0:	1c be       	out	0x3c, r1	; 60
	/*TCCR0 |= (1<<WGM00) | (1<<COM01) | (1<<CS00);*/
	/*PC PWM Settings*/
	SET_BIT(TCCR0,WGM00);
 2f2:	83 b7       	in	r24, 0x33	; 51
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM01);
 2f8:	83 b7       	in	r24, 0x33	; 51
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	83 bf       	out	0x33, r24	; 51
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR0,COM01);
 2fe:	83 b7       	in	r24, 0x33	; 51
 300:	80 62       	ori	r24, 0x20	; 32
 302:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
 304:	83 b7       	in	r24, 0x33	; 51
 306:	8f 7e       	andi	r24, 0xEF	; 239
 308:	83 bf       	out	0x33, r24	; 51
	/*Select prescalar=8*/
	SET_BIT(TCCR0,CS01);
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS00);
 310:	83 b7       	in	r24, 0x33	; 51
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 316:	83 b7       	in	r24, 0x33	; 51
 318:	8b 7f       	andi	r24, 0xFB	; 251
 31a:	83 bf       	out	0x33, r24	; 51
	/*Setting pin OC0 to be output*/
	SET_BIT(DDRB,PB3);
 31c:	bb 9a       	sbi	0x17, 3	; 23
 31e:	08 95       	ret

00000320 <set_speed_ML>:
}
void set_speed_ML(uint8 duty_cycle) //set_dutyCycle_Timer0 // takes decimal
{
	OCR0 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 320:	68 2f       	mov	r22, r24
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 03 03 	call	0x606	; 0x606 <__floatsisf>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	48 ec       	ldi	r20, 0xC8	; 200
 332:	52 e4       	ldi	r21, 0x42	; 66
 334:	0e 94 6d 02 	call	0x4da	; 0x4da <__divsf3>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	4f e7       	ldi	r20, 0x7F	; 127
 33e:	53 e4       	ldi	r21, 0x43	; 67
 340:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	0e 94 09 02 	call	0x412	; 0x412 <__addsf3>
 350:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 354:	6c bf       	out	0x3c, r22	; 60
 356:	08 95       	ret

00000358 <Timer2_PC_PWMinit>:
 */ 

#include "Timer2.h"
void Timer2_PC_PWMinit(void)
{
	TCNT2=0;	//count = 0 initially
 358:	14 bc       	out	0x24, r1	; 36
	OCR2=0;		//compare match value = 0 initially
 35a:	13 bc       	out	0x23, r1	; 35
	/*PC PWM Settings*/
	SET_BIT(TCCR2,WGM20);
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,WGM21);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	85 bd       	out	0x25, r24	; 37
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR2,COM21);
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	80 62       	ori	r24, 0x20	; 32
 36c:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,COM20);
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	85 bd       	out	0x25, r24	; 37
	/*Set prescalar to 8*/
	SET_BIT(TCCR2,CS21);
 374:	85 b5       	in	r24, 0x25	; 37
 376:	82 60       	ori	r24, 0x02	; 2
 378:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS22);
 37a:	85 b5       	in	r24, 0x25	; 37
 37c:	8b 7f       	andi	r24, 0xFB	; 251
 37e:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS20);
 380:	85 b5       	in	r24, 0x25	; 37
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	85 bd       	out	0x25, r24	; 37
	/*Setting pin OC2 to be output*/
	SET_BIT(DDRD, PD7);
 386:	8f 9a       	sbi	0x11, 7	; 17
 388:	08 95       	ret

0000038a <set_speed_MR>:
}
void set_speed_MR(uint8 duty_cycle) //set_dutyCycle_Timer2 // takes decimal
{
	OCR2 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 38a:	68 2f       	mov	r22, r24
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 03 03 	call	0x606	; 0x606 <__floatsisf>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	48 ec       	ldi	r20, 0xC8	; 200
 39c:	52 e4       	ldi	r21, 0x42	; 66
 39e:	0e 94 6d 02 	call	0x4da	; 0x4da <__divsf3>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4f e7       	ldi	r20, 0x7F	; 127
 3a8:	53 e4       	ldi	r21, 0x43	; 67
 3aa:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	5f e3       	ldi	r21, 0x3F	; 63
 3b6:	0e 94 09 02 	call	0x412	; 0x412 <__addsf3>
 3ba:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 3be:	63 bd       	out	0x23, r22	; 35
 3c0:	08 95       	ret

000003c2 <UART_init>:
 3c2:	0e 94 01 03 	call	0x602	; 0x602 <__floatunsisf>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 3d2:	9b 01       	movw	r18, r22
 3d4:	ac 01       	movw	r20, r24
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	74 e2       	ldi	r23, 0x24	; 36
 3da:	84 e7       	ldi	r24, 0x74	; 116
 3dc:	99 e4       	ldi	r25, 0x49	; 73
 3de:	0e 94 6d 02 	call	0x4da	; 0x4da <__divsf3>
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	5f e3       	ldi	r21, 0x3F	; 63
 3ea:	0e 94 08 02 	call	0x410	; 0x410 <__subsf3>
 3ee:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__fixunssfsi>
 3f2:	59 9a       	sbi	0x0b, 1	; 11
 3f4:	8a b1       	in	r24, 0x0a	; 10
 3f6:	88 61       	ori	r24, 0x18	; 24
 3f8:	8a b9       	out	0x0a, r24	; 10
 3fa:	80 b5       	in	r24, 0x20	; 32
 3fc:	86 68       	ori	r24, 0x86	; 134
 3fe:	80 bd       	out	0x20, r24	; 32
 400:	52 98       	cbi	0x0a, 2	; 10
 402:	69 b9       	out	0x09, r22	; 9
 404:	70 bd       	out	0x20, r23	; 32
 406:	08 95       	ret

00000408 <UART_receive>:
 408:	5f 9b       	sbis	0x0b, 7	; 11
 40a:	fe cf       	rjmp	.-4      	; 0x408 <UART_receive>
 40c:	8c b1       	in	r24, 0x0c	; 12
 40e:	08 95       	ret

00000410 <__subsf3>:
 410:	50 58       	subi	r21, 0x80	; 128

00000412 <__addsf3>:
 412:	bb 27       	eor	r27, r27
 414:	aa 27       	eor	r26, r26
 416:	0e d0       	rcall	.+28     	; 0x434 <__addsf3x>
 418:	48 c1       	rjmp	.+656    	; 0x6aa <__fp_round>
 41a:	39 d1       	rcall	.+626    	; 0x68e <__fp_pscA>
 41c:	30 f0       	brcs	.+12     	; 0x42a <__addsf3+0x18>
 41e:	3e d1       	rcall	.+636    	; 0x69c <__fp_pscB>
 420:	20 f0       	brcs	.+8      	; 0x42a <__addsf3+0x18>
 422:	31 f4       	brne	.+12     	; 0x430 <__addsf3+0x1e>
 424:	9f 3f       	cpi	r25, 0xFF	; 255
 426:	11 f4       	brne	.+4      	; 0x42c <__addsf3+0x1a>
 428:	1e f4       	brtc	.+6      	; 0x430 <__addsf3+0x1e>
 42a:	2e c1       	rjmp	.+604    	; 0x688 <__fp_nan>
 42c:	0e f4       	brtc	.+2      	; 0x430 <__addsf3+0x1e>
 42e:	e0 95       	com	r30
 430:	e7 fb       	bst	r30, 7
 432:	24 c1       	rjmp	.+584    	; 0x67c <__fp_inf>

00000434 <__addsf3x>:
 434:	e9 2f       	mov	r30, r25
 436:	4a d1       	rcall	.+660    	; 0x6cc <__fp_split3>
 438:	80 f3       	brcs	.-32     	; 0x41a <__addsf3+0x8>
 43a:	ba 17       	cp	r27, r26
 43c:	62 07       	cpc	r22, r18
 43e:	73 07       	cpc	r23, r19
 440:	84 07       	cpc	r24, r20
 442:	95 07       	cpc	r25, r21
 444:	18 f0       	brcs	.+6      	; 0x44c <__addsf3x+0x18>
 446:	71 f4       	brne	.+28     	; 0x464 <__addsf3x+0x30>
 448:	9e f5       	brtc	.+102    	; 0x4b0 <__addsf3x+0x7c>
 44a:	62 c1       	rjmp	.+708    	; 0x710 <__fp_zero>
 44c:	0e f4       	brtc	.+2      	; 0x450 <__addsf3x+0x1c>
 44e:	e0 95       	com	r30
 450:	0b 2e       	mov	r0, r27
 452:	ba 2f       	mov	r27, r26
 454:	a0 2d       	mov	r26, r0
 456:	0b 01       	movw	r0, r22
 458:	b9 01       	movw	r22, r18
 45a:	90 01       	movw	r18, r0
 45c:	0c 01       	movw	r0, r24
 45e:	ca 01       	movw	r24, r20
 460:	a0 01       	movw	r20, r0
 462:	11 24       	eor	r1, r1
 464:	ff 27       	eor	r31, r31
 466:	59 1b       	sub	r21, r25
 468:	99 f0       	breq	.+38     	; 0x490 <__addsf3x+0x5c>
 46a:	59 3f       	cpi	r21, 0xF9	; 249
 46c:	50 f4       	brcc	.+20     	; 0x482 <__addsf3x+0x4e>
 46e:	50 3e       	cpi	r21, 0xE0	; 224
 470:	68 f1       	brcs	.+90     	; 0x4cc <__addsf3x+0x98>
 472:	1a 16       	cp	r1, r26
 474:	f0 40       	sbci	r31, 0x00	; 0
 476:	a2 2f       	mov	r26, r18
 478:	23 2f       	mov	r18, r19
 47a:	34 2f       	mov	r19, r20
 47c:	44 27       	eor	r20, r20
 47e:	58 5f       	subi	r21, 0xF8	; 248
 480:	f3 cf       	rjmp	.-26     	; 0x468 <__addsf3x+0x34>
 482:	46 95       	lsr	r20
 484:	37 95       	ror	r19
 486:	27 95       	ror	r18
 488:	a7 95       	ror	r26
 48a:	f0 40       	sbci	r31, 0x00	; 0
 48c:	53 95       	inc	r21
 48e:	c9 f7       	brne	.-14     	; 0x482 <__addsf3x+0x4e>
 490:	7e f4       	brtc	.+30     	; 0x4b0 <__addsf3x+0x7c>
 492:	1f 16       	cp	r1, r31
 494:	ba 0b       	sbc	r27, r26
 496:	62 0b       	sbc	r22, r18
 498:	73 0b       	sbc	r23, r19
 49a:	84 0b       	sbc	r24, r20
 49c:	ba f0       	brmi	.+46     	; 0x4cc <__addsf3x+0x98>
 49e:	91 50       	subi	r25, 0x01	; 1
 4a0:	a1 f0       	breq	.+40     	; 0x4ca <__addsf3x+0x96>
 4a2:	ff 0f       	add	r31, r31
 4a4:	bb 1f       	adc	r27, r27
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	c2 f7       	brpl	.-16     	; 0x49e <__addsf3x+0x6a>
 4ae:	0e c0       	rjmp	.+28     	; 0x4cc <__addsf3x+0x98>
 4b0:	ba 0f       	add	r27, r26
 4b2:	62 1f       	adc	r22, r18
 4b4:	73 1f       	adc	r23, r19
 4b6:	84 1f       	adc	r24, r20
 4b8:	48 f4       	brcc	.+18     	; 0x4cc <__addsf3x+0x98>
 4ba:	87 95       	ror	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f7 95       	ror	r31
 4c4:	9e 3f       	cpi	r25, 0xFE	; 254
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <__addsf3x+0x96>
 4c8:	b3 cf       	rjmp	.-154    	; 0x430 <__addsf3+0x1e>
 4ca:	93 95       	inc	r25
 4cc:	88 0f       	add	r24, r24
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__addsf3x+0x9e>
 4d0:	99 27       	eor	r25, r25
 4d2:	ee 0f       	add	r30, r30
 4d4:	97 95       	ror	r25
 4d6:	87 95       	ror	r24
 4d8:	08 95       	ret

000004da <__divsf3>:
 4da:	0c d0       	rcall	.+24     	; 0x4f4 <__divsf3x>
 4dc:	e6 c0       	rjmp	.+460    	; 0x6aa <__fp_round>
 4de:	de d0       	rcall	.+444    	; 0x69c <__fp_pscB>
 4e0:	40 f0       	brcs	.+16     	; 0x4f2 <__divsf3+0x18>
 4e2:	d5 d0       	rcall	.+426    	; 0x68e <__fp_pscA>
 4e4:	30 f0       	brcs	.+12     	; 0x4f2 <__divsf3+0x18>
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__divsf3+0x16>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <__divsf3+0x18>
 4ec:	c7 c0       	rjmp	.+398    	; 0x67c <__fp_inf>
 4ee:	51 11       	cpse	r21, r1
 4f0:	10 c1       	rjmp	.+544    	; 0x712 <__fp_szero>
 4f2:	ca c0       	rjmp	.+404    	; 0x688 <__fp_nan>

000004f4 <__divsf3x>:
 4f4:	eb d0       	rcall	.+470    	; 0x6cc <__fp_split3>
 4f6:	98 f3       	brcs	.-26     	; 0x4de <__divsf3+0x4>

000004f8 <__divsf3_pse>:
 4f8:	99 23       	and	r25, r25
 4fa:	c9 f3       	breq	.-14     	; 0x4ee <__divsf3+0x14>
 4fc:	55 23       	and	r21, r21
 4fe:	b1 f3       	breq	.-20     	; 0x4ec <__divsf3+0x12>
 500:	95 1b       	sub	r25, r21
 502:	55 0b       	sbc	r21, r21
 504:	bb 27       	eor	r27, r27
 506:	aa 27       	eor	r26, r26
 508:	62 17       	cp	r22, r18
 50a:	73 07       	cpc	r23, r19
 50c:	84 07       	cpc	r24, r20
 50e:	38 f0       	brcs	.+14     	; 0x51e <__divsf3_pse+0x26>
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	44 1f       	adc	r20, r20
 51a:	aa 1f       	adc	r26, r26
 51c:	a9 f3       	breq	.-22     	; 0x508 <__divsf3_pse+0x10>
 51e:	33 d0       	rcall	.+102    	; 0x586 <__divsf3_pse+0x8e>
 520:	0e 2e       	mov	r0, r30
 522:	3a f0       	brmi	.+14     	; 0x532 <__divsf3_pse+0x3a>
 524:	e0 e8       	ldi	r30, 0x80	; 128
 526:	30 d0       	rcall	.+96     	; 0x588 <__divsf3_pse+0x90>
 528:	91 50       	subi	r25, 0x01	; 1
 52a:	50 40       	sbci	r21, 0x00	; 0
 52c:	e6 95       	lsr	r30
 52e:	00 1c       	adc	r0, r0
 530:	ca f7       	brpl	.-14     	; 0x524 <__divsf3_pse+0x2c>
 532:	29 d0       	rcall	.+82     	; 0x586 <__divsf3_pse+0x8e>
 534:	fe 2f       	mov	r31, r30
 536:	27 d0       	rcall	.+78     	; 0x586 <__divsf3_pse+0x8e>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	bb 1f       	adc	r27, r27
 540:	26 17       	cp	r18, r22
 542:	37 07       	cpc	r19, r23
 544:	48 07       	cpc	r20, r24
 546:	ab 07       	cpc	r26, r27
 548:	b0 e8       	ldi	r27, 0x80	; 128
 54a:	09 f0       	breq	.+2      	; 0x54e <__divsf3_pse+0x56>
 54c:	bb 0b       	sbc	r27, r27
 54e:	80 2d       	mov	r24, r0
 550:	bf 01       	movw	r22, r30
 552:	ff 27       	eor	r31, r31
 554:	93 58       	subi	r25, 0x83	; 131
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	2a f0       	brmi	.+10     	; 0x564 <__divsf3_pse+0x6c>
 55a:	9e 3f       	cpi	r25, 0xFE	; 254
 55c:	51 05       	cpc	r21, r1
 55e:	68 f0       	brcs	.+26     	; 0x57a <__divsf3_pse+0x82>
 560:	8d c0       	rjmp	.+282    	; 0x67c <__fp_inf>
 562:	d7 c0       	rjmp	.+430    	; 0x712 <__fp_szero>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	ec f3       	brlt	.-6      	; 0x562 <__divsf3_pse+0x6a>
 568:	98 3e       	cpi	r25, 0xE8	; 232
 56a:	dc f3       	brlt	.-10     	; 0x562 <__divsf3_pse+0x6a>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f7 95       	ror	r31
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	c9 f7       	brne	.-14     	; 0x56c <__divsf3_pse+0x74>
 57a:	88 0f       	add	r24, r24
 57c:	91 1d       	adc	r25, r1
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret
 586:	e1 e0       	ldi	r30, 0x01	; 1
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	bb 1f       	adc	r27, r27
 590:	62 17       	cp	r22, r18
 592:	73 07       	cpc	r23, r19
 594:	84 07       	cpc	r24, r20
 596:	ba 07       	cpc	r27, r26
 598:	20 f0       	brcs	.+8      	; 0x5a2 <__divsf3_pse+0xaa>
 59a:	62 1b       	sub	r22, r18
 59c:	73 0b       	sbc	r23, r19
 59e:	84 0b       	sbc	r24, r20
 5a0:	ba 0b       	sbc	r27, r26
 5a2:	ee 1f       	adc	r30, r30
 5a4:	88 f7       	brcc	.-30     	; 0x588 <__divsf3_pse+0x90>
 5a6:	e0 95       	com	r30
 5a8:	08 95       	ret

000005aa <__fixunssfsi>:
 5aa:	98 d0       	rcall	.+304    	; 0x6dc <__fp_splitA>
 5ac:	88 f0       	brcs	.+34     	; 0x5d0 <__fixunssfsi+0x26>
 5ae:	9f 57       	subi	r25, 0x7F	; 127
 5b0:	90 f0       	brcs	.+36     	; 0x5d6 <__fixunssfsi+0x2c>
 5b2:	b9 2f       	mov	r27, r25
 5b4:	99 27       	eor	r25, r25
 5b6:	b7 51       	subi	r27, 0x17	; 23
 5b8:	a0 f0       	brcs	.+40     	; 0x5e2 <__fixunssfsi+0x38>
 5ba:	d1 f0       	breq	.+52     	; 0x5f0 <__fixunssfsi+0x46>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	1a f0       	brmi	.+6      	; 0x5cc <__fixunssfsi+0x22>
 5c6:	ba 95       	dec	r27
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__fixunssfsi+0x12>
 5ca:	12 c0       	rjmp	.+36     	; 0x5f0 <__fixunssfsi+0x46>
 5cc:	b1 30       	cpi	r27, 0x01	; 1
 5ce:	81 f0       	breq	.+32     	; 0x5f0 <__fixunssfsi+0x46>
 5d0:	9f d0       	rcall	.+318    	; 0x710 <__fp_zero>
 5d2:	b1 e0       	ldi	r27, 0x01	; 1
 5d4:	08 95       	ret
 5d6:	9c c0       	rjmp	.+312    	; 0x710 <__fp_zero>
 5d8:	67 2f       	mov	r22, r23
 5da:	78 2f       	mov	r23, r24
 5dc:	88 27       	eor	r24, r24
 5de:	b8 5f       	subi	r27, 0xF8	; 248
 5e0:	39 f0       	breq	.+14     	; 0x5f0 <__fixunssfsi+0x46>
 5e2:	b9 3f       	cpi	r27, 0xF9	; 249
 5e4:	cc f3       	brlt	.-14     	; 0x5d8 <__fixunssfsi+0x2e>
 5e6:	86 95       	lsr	r24
 5e8:	77 95       	ror	r23
 5ea:	67 95       	ror	r22
 5ec:	b3 95       	inc	r27
 5ee:	d9 f7       	brne	.-10     	; 0x5e6 <__fixunssfsi+0x3c>
 5f0:	3e f4       	brtc	.+14     	; 0x600 <__fixunssfsi+0x56>
 5f2:	90 95       	com	r25
 5f4:	80 95       	com	r24
 5f6:	70 95       	com	r23
 5f8:	61 95       	neg	r22
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	08 95       	ret

00000602 <__floatunsisf>:
 602:	e8 94       	clt
 604:	09 c0       	rjmp	.+18     	; 0x618 <__floatsisf+0x12>

00000606 <__floatsisf>:
 606:	97 fb       	bst	r25, 7
 608:	3e f4       	brtc	.+14     	; 0x618 <__floatsisf+0x12>
 60a:	90 95       	com	r25
 60c:	80 95       	com	r24
 60e:	70 95       	com	r23
 610:	61 95       	neg	r22
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	8f 4f       	sbci	r24, 0xFF	; 255
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	99 23       	and	r25, r25
 61a:	a9 f0       	breq	.+42     	; 0x646 <__floatsisf+0x40>
 61c:	f9 2f       	mov	r31, r25
 61e:	96 e9       	ldi	r25, 0x96	; 150
 620:	bb 27       	eor	r27, r27
 622:	93 95       	inc	r25
 624:	f6 95       	lsr	r31
 626:	87 95       	ror	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b7 95       	ror	r27
 62e:	f1 11       	cpse	r31, r1
 630:	f8 cf       	rjmp	.-16     	; 0x622 <__floatsisf+0x1c>
 632:	fa f4       	brpl	.+62     	; 0x672 <__floatsisf+0x6c>
 634:	bb 0f       	add	r27, r27
 636:	11 f4       	brne	.+4      	; 0x63c <__floatsisf+0x36>
 638:	60 ff       	sbrs	r22, 0
 63a:	1b c0       	rjmp	.+54     	; 0x672 <__floatsisf+0x6c>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	16 c0       	rjmp	.+44     	; 0x672 <__floatsisf+0x6c>
 646:	88 23       	and	r24, r24
 648:	11 f0       	breq	.+4      	; 0x64e <__floatsisf+0x48>
 64a:	96 e9       	ldi	r25, 0x96	; 150
 64c:	11 c0       	rjmp	.+34     	; 0x670 <__floatsisf+0x6a>
 64e:	77 23       	and	r23, r23
 650:	21 f0       	breq	.+8      	; 0x65a <__floatsisf+0x54>
 652:	9e e8       	ldi	r25, 0x8E	; 142
 654:	87 2f       	mov	r24, r23
 656:	76 2f       	mov	r23, r22
 658:	05 c0       	rjmp	.+10     	; 0x664 <__floatsisf+0x5e>
 65a:	66 23       	and	r22, r22
 65c:	71 f0       	breq	.+28     	; 0x67a <__floatsisf+0x74>
 65e:	96 e8       	ldi	r25, 0x86	; 134
 660:	86 2f       	mov	r24, r22
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	2a f0       	brmi	.+10     	; 0x672 <__floatsisf+0x6c>
 668:	9a 95       	dec	r25
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	da f7       	brpl	.-10     	; 0x668 <__floatsisf+0x62>
 672:	88 0f       	add	r24, r24
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret

0000067c <__fp_inf>:
 67c:	97 f9       	bld	r25, 7
 67e:	9f 67       	ori	r25, 0x7F	; 127
 680:	80 e8       	ldi	r24, 0x80	; 128
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	08 95       	ret

00000688 <__fp_nan>:
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	08 95       	ret

0000068e <__fp_pscA>:
 68e:	00 24       	eor	r0, r0
 690:	0a 94       	dec	r0
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	09 06       	cpc	r0, r25
 69a:	08 95       	ret

0000069c <__fp_pscB>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	05 06       	cpc	r0, r21
 6a8:	08 95       	ret

000006aa <__fp_round>:
 6aa:	09 2e       	mov	r0, r25
 6ac:	03 94       	inc	r0
 6ae:	00 0c       	add	r0, r0
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0xc>
 6b2:	88 23       	and	r24, r24
 6b4:	52 f0       	brmi	.+20     	; 0x6ca <__fp_round+0x20>
 6b6:	bb 0f       	add	r27, r27
 6b8:	40 f4       	brcc	.+16     	; 0x6ca <__fp_round+0x20>
 6ba:	bf 2b       	or	r27, r31
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0x18>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__fp_round+0x20>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__fp_split3>:
 6cc:	57 fd       	sbrc	r21, 7
 6ce:	90 58       	subi	r25, 0x80	; 128
 6d0:	44 0f       	add	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	59 f0       	breq	.+22     	; 0x6ec <__fp_splitA+0x10>
 6d6:	5f 3f       	cpi	r21, 0xFF	; 255
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <__fp_splitA+0x1a>
 6da:	47 95       	ror	r20

000006dc <__fp_splitA>:
 6dc:	88 0f       	add	r24, r24
 6de:	97 fb       	bst	r25, 7
 6e0:	99 1f       	adc	r25, r25
 6e2:	61 f0       	breq	.+24     	; 0x6fc <__fp_splitA+0x20>
 6e4:	9f 3f       	cpi	r25, 0xFF	; 255
 6e6:	79 f0       	breq	.+30     	; 0x706 <__fp_splitA+0x2a>
 6e8:	87 95       	ror	r24
 6ea:	08 95       	ret
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	f2 cf       	rjmp	.-28     	; 0x6da <__fp_split3+0xe>
 6f6:	46 95       	lsr	r20
 6f8:	f1 df       	rcall	.-30     	; 0x6dc <__fp_splitA>
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <__fp_splitA+0x30>
 6fc:	16 16       	cp	r1, r22
 6fe:	17 06       	cpc	r1, r23
 700:	18 06       	cpc	r1, r24
 702:	99 1f       	adc	r25, r25
 704:	f1 cf       	rjmp	.-30     	; 0x6e8 <__fp_splitA+0xc>
 706:	86 95       	lsr	r24
 708:	71 05       	cpc	r23, r1
 70a:	61 05       	cpc	r22, r1
 70c:	08 94       	sec
 70e:	08 95       	ret

00000710 <__fp_zero>:
 710:	e8 94       	clt

00000712 <__fp_szero>:
 712:	bb 27       	eor	r27, r27
 714:	66 27       	eor	r22, r22
 716:	77 27       	eor	r23, r23
 718:	cb 01       	movw	r24, r22
 71a:	97 f9       	bld	r25, 7
 71c:	08 95       	ret

0000071e <__mulsf3>:
 71e:	0b d0       	rcall	.+22     	; 0x736 <__mulsf3x>
 720:	c4 cf       	rjmp	.-120    	; 0x6aa <__fp_round>
 722:	b5 df       	rcall	.-150    	; 0x68e <__fp_pscA>
 724:	28 f0       	brcs	.+10     	; 0x730 <__mulsf3+0x12>
 726:	ba df       	rcall	.-140    	; 0x69c <__fp_pscB>
 728:	18 f0       	brcs	.+6      	; 0x730 <__mulsf3+0x12>
 72a:	95 23       	and	r25, r21
 72c:	09 f0       	breq	.+2      	; 0x730 <__mulsf3+0x12>
 72e:	a6 cf       	rjmp	.-180    	; 0x67c <__fp_inf>
 730:	ab cf       	rjmp	.-170    	; 0x688 <__fp_nan>
 732:	11 24       	eor	r1, r1
 734:	ee cf       	rjmp	.-36     	; 0x712 <__fp_szero>

00000736 <__mulsf3x>:
 736:	ca df       	rcall	.-108    	; 0x6cc <__fp_split3>
 738:	a0 f3       	brcs	.-24     	; 0x722 <__mulsf3+0x4>

0000073a <__mulsf3_pse>:
 73a:	95 9f       	mul	r25, r21
 73c:	d1 f3       	breq	.-12     	; 0x732 <__mulsf3+0x14>
 73e:	95 0f       	add	r25, r21
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	55 1f       	adc	r21, r21
 744:	62 9f       	mul	r22, r18
 746:	f0 01       	movw	r30, r0
 748:	72 9f       	mul	r23, r18
 74a:	bb 27       	eor	r27, r27
 74c:	f0 0d       	add	r31, r0
 74e:	b1 1d       	adc	r27, r1
 750:	63 9f       	mul	r22, r19
 752:	aa 27       	eor	r26, r26
 754:	f0 0d       	add	r31, r0
 756:	b1 1d       	adc	r27, r1
 758:	aa 1f       	adc	r26, r26
 75a:	64 9f       	mul	r22, r20
 75c:	66 27       	eor	r22, r22
 75e:	b0 0d       	add	r27, r0
 760:	a1 1d       	adc	r26, r1
 762:	66 1f       	adc	r22, r22
 764:	82 9f       	mul	r24, r18
 766:	22 27       	eor	r18, r18
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	62 1f       	adc	r22, r18
 76e:	73 9f       	mul	r23, r19
 770:	b0 0d       	add	r27, r0
 772:	a1 1d       	adc	r26, r1
 774:	62 1f       	adc	r22, r18
 776:	83 9f       	mul	r24, r19
 778:	a0 0d       	add	r26, r0
 77a:	61 1d       	adc	r22, r1
 77c:	22 1f       	adc	r18, r18
 77e:	74 9f       	mul	r23, r20
 780:	33 27       	eor	r19, r19
 782:	a0 0d       	add	r26, r0
 784:	61 1d       	adc	r22, r1
 786:	23 1f       	adc	r18, r19
 788:	84 9f       	mul	r24, r20
 78a:	60 0d       	add	r22, r0
 78c:	21 1d       	adc	r18, r1
 78e:	82 2f       	mov	r24, r18
 790:	76 2f       	mov	r23, r22
 792:	6a 2f       	mov	r22, r26
 794:	11 24       	eor	r1, r1
 796:	9f 57       	subi	r25, 0x7F	; 127
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	8a f0       	brmi	.+34     	; 0x7be <__mulsf3_pse+0x84>
 79c:	e1 f0       	breq	.+56     	; 0x7d6 <__mulsf3_pse+0x9c>
 79e:	88 23       	and	r24, r24
 7a0:	4a f0       	brmi	.+18     	; 0x7b4 <__mulsf3_pse+0x7a>
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	bb 1f       	adc	r27, r27
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__mulsf3_pse+0x64>
 7b4:	9e 3f       	cpi	r25, 0xFE	; 254
 7b6:	51 05       	cpc	r21, r1
 7b8:	70 f0       	brcs	.+28     	; 0x7d6 <__mulsf3_pse+0x9c>
 7ba:	60 cf       	rjmp	.-320    	; 0x67c <__fp_inf>
 7bc:	aa cf       	rjmp	.-172    	; 0x712 <__fp_szero>
 7be:	5f 3f       	cpi	r21, 0xFF	; 255
 7c0:	ec f3       	brlt	.-6      	; 0x7bc <__mulsf3_pse+0x82>
 7c2:	98 3e       	cpi	r25, 0xE8	; 232
 7c4:	dc f3       	brlt	.-10     	; 0x7bc <__mulsf3_pse+0x82>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b7 95       	ror	r27
 7ce:	f7 95       	ror	r31
 7d0:	e7 95       	ror	r30
 7d2:	9f 5f       	subi	r25, 0xFF	; 255
 7d4:	c1 f7       	brne	.-16     	; 0x7c6 <__mulsf3_pse+0x8c>
 7d6:	fe 2b       	or	r31, r30
 7d8:	88 0f       	add	r24, r24
 7da:	91 1d       	adc	r25, r1
 7dc:	96 95       	lsr	r25
 7de:	87 95       	ror	r24
 7e0:	97 f9       	bld	r25, 7
 7e2:	08 95       	ret

000007e4 <__tablejump2__>:
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31

000007e8 <__tablejump__>:
 7e8:	05 90       	lpm	r0, Z+
 7ea:	f4 91       	lpm	r31, Z
 7ec:	e0 2d       	mov	r30, r0
 7ee:	09 94       	ijmp

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
