
puttingTogether1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000168  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000c84  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000050a  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000006b6  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000300  00000000  00000000  00002254  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000003aa  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000007c9  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f8  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  64:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ForwardRightLF>:
 *  Author: Matt
 */
#include "LineFollower.h" 

void ForwardRightLF(float32 speed, float32 degree)
{
  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	6b 01       	movw	r12, r22
  7e:	7c 01       	movw	r14, r24
  80:	49 01       	movw	r8, r18
  82:	5a 01       	movw	r10, r20
	set_speed_ML(speed);
  84:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
  88:	86 2f       	mov	r24, r22
  8a:	0e 94 8a 01 	call	0x314	; 0x314 <set_speed_ML>
	set_speed_MR(degree*speed);
  8e:	a7 01       	movw	r20, r14
  90:	96 01       	movw	r18, r12
  92:	c5 01       	movw	r24, r10
  94:	b4 01       	movw	r22, r8
  96:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
  9a:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
  9e:	86 2f       	mov	r24, r22
  a0:	0e 94 bf 01 	call	0x37e	; 0x37e <set_speed_MR>
	set_direction_ML(CW);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
	set_direction_MR(CW);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
}
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	08 95       	ret

000000c2 <ForwardLeftLF>:
void ForwardLeftLF(float32 speed, float32 degree)
{
  c2:	8f 92       	push	r8
  c4:	9f 92       	push	r9
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	6b 01       	movw	r12, r22
  d4:	7c 01       	movw	r14, r24
  d6:	49 01       	movw	r8, r18
  d8:	5a 01       	movw	r10, r20
	set_speed_MR(speed);
  da:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
  de:	86 2f       	mov	r24, r22
  e0:	0e 94 bf 01 	call	0x37e	; 0x37e <set_speed_MR>
	set_speed_ML(speed*degree);
  e4:	a5 01       	movw	r20, r10
  e6:	94 01       	movw	r18, r8
  e8:	c7 01       	movw	r24, r14
  ea:	b6 01       	movw	r22, r12
  ec:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
  f0:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
  f4:	86 2f       	mov	r24, r22
  f6:	0e 94 8a 01 	call	0x314	; 0x314 <set_speed_ML>
	set_direction_MR(CW);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
	set_direction_ML(CW);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
}
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	df 90       	pop	r13
 10c:	cf 90       	pop	r12
 10e:	bf 90       	pop	r11
 110:	af 90       	pop	r10
 112:	9f 90       	pop	r9
 114:	8f 90       	pop	r8
 116:	08 95       	ret

00000118 <driver_init>:

#include "MotorDriver.h"

void driver_init()
{
	SET_BIT(DDRA,ML_IN1);
 118:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,ML_IN2);
 11a:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,MR_IN1);
 11c:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,MR_IN2);
 11e:	d3 9a       	sbi	0x1a, 3	; 26
 120:	08 95       	ret

00000122 <set_direction_ML>:
}
void set_direction_ML(uint8 direction)
{
	if(direction == CW)
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <set_direction_ML+0xa>
	{
		CLEAR_BIT(PORTA, ML_IN1);
 126:	d8 98       	cbi	0x1b, 0	; 27
		SET_BIT(PORTA, ML_IN2);
 128:	d9 9a       	sbi	0x1b, 1	; 27
 12a:	08 95       	ret
	}
	else if (direction == ACW)
 12c:	81 11       	cpse	r24, r1
 12e:	02 c0       	rjmp	.+4      	; 0x134 <set_direction_ML+0x12>
	{
		SET_BIT(PORTA, ML_IN1);
 130:	d8 9a       	sbi	0x1b, 0	; 27
		CLEAR_BIT(PORTA, ML_IN2);
 132:	d9 98       	cbi	0x1b, 1	; 27
 134:	08 95       	ret

00000136 <set_direction_MR>:
	} 
}
void set_direction_MR(uint8 direction)
{
	if(direction == CW)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <set_direction_MR+0xa>
	{
		CLEAR_BIT(PORTA, MR_IN1);
 13a:	da 98       	cbi	0x1b, 2	; 27
		SET_BIT(PORTA, MR_IN2);
 13c:	db 9a       	sbi	0x1b, 3	; 27
 13e:	08 95       	ret
	}
	else if (direction == ACW)
 140:	81 11       	cpse	r24, r1
 142:	02 c0       	rjmp	.+4      	; 0x148 <set_direction_MR+0x12>
	{
		
		SET_BIT(PORTA, MR_IN1);
 144:	da 9a       	sbi	0x1b, 2	; 27
		CLEAR_BIT(PORTA, MR_IN2);
 146:	db 98       	cbi	0x1b, 3	; 27
 148:	08 95       	ret

0000014a <init>:
	}
}

void init()
{
	Timer0_PC_PWMinit();
 14a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Timer0_PC_PWMinit>
	Timer2_PC_PWMinit();
 14e:	0e 94 a6 01 	call	0x34c	; 0x34c <Timer2_PC_PWMinit>
	driver_init();	
 152:	0e 94 8c 00 	call	0x118	; 0x118 <driver_init>
	UART_init(9600);
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_init>
 162:	08 95       	ret

00000164 <main>:


#include "puttingTogether1.h"

int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	29 97       	sbiw	r28, 0x09	; 9
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	init();
 178:	0e 94 a5 00 	call	0x14a	; 0x14a <init>
	SET_BIT(DDRA,PA5);  //sets PA4 as output
 17c:	d5 9a       	sbi	0x1a, 5	; 26
	
	//
	CLEAR_BIT(DDRD, PD6);
 17e:	8e 98       	cbi	0x11, 6	; 17
	CLEAR_BIT(DDRD, PD5);
 180:	8d 98       	cbi	0x11, 5	; 17
	CLEAR_BIT(DDRD, PD4);
 182:	8c 98       	cbi	0x11, 4	; 17
	volatile uint8 currState;
	volatile float32 turnLeftSpeed = 0.55;
 184:	8d ec       	ldi	r24, 0xCD	; 205
 186:	9c ec       	ldi	r25, 0xCC	; 204
 188:	ac e0       	ldi	r26, 0x0C	; 12
 18a:	bf e3       	ldi	r27, 0x3F	; 63
 18c:	8a 83       	std	Y+2, r24	; 0x02
 18e:	9b 83       	std	Y+3, r25	; 0x03
 190:	ac 83       	std	Y+4, r26	; 0x04
 192:	bd 83       	std	Y+5, r27	; 0x05
	volatile float32 turnRightSpeed = 0.55;	
 194:	8e 83       	std	Y+6, r24	; 0x06
 196:	9f 83       	std	Y+7, r25	; 0x07
 198:	a8 87       	std	Y+8, r26	; 0x08
 19a:	b9 87       	std	Y+9, r27	; 0x09
		}
		else if(IS_BIT_SET(PIND, PD6) && IS_BIT_CLEAR(PIND, PD4))
		{
			if(currState != FORWARDRIGHT)
			{
				currState = FORWARDRIGHT;
 19c:	09 e4       	ldi	r16, 0x49	; 73
				turnRightSpeed = 0.5;
 19e:	0f 2e       	mov	r0, r31
 1a0:	c1 2c       	mov	r12, r1
 1a2:	d1 2c       	mov	r13, r1
 1a4:	e1 2c       	mov	r14, r1
 1a6:	ff e3       	ldi	r31, 0x3F	; 63
 1a8:	ff 2e       	mov	r15, r31
 1aa:	f0 2d       	mov	r31, r0
		//Left on, right off
		else if(IS_BIT_CLEAR(PIND, PD6) && IS_BIT_SET(PIND, PD4))
		{
			if(currState != FORWARDLEFT)
			{
				currState = FORWARDLEFT;
 1ac:	17 e4       	ldi	r17, 0x47	; 71
		
		//Line follower mode code starts here
		
		if(IS_BIT_CLEAR(PIND, PD5) && IS_BIT_SET(PIND, PD4) && IS_BIT_SET(PIND, PD6))
		{
			currState = FORWARD;
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f6 e4       	ldi	r31, 0x46	; 70
 1b2:	bf 2e       	mov	r11, r31
 1b4:	f0 2d       	mov	r31, r0
		//PD6 = left
		
		
		//Line follower mode code starts here
		
		if(IS_BIT_CLEAR(PIND, PD5) && IS_BIT_SET(PIND, PD4) && IS_BIT_SET(PIND, PD6))
 1b6:	85 99       	sbic	0x10, 5	; 16
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <main+0x6e>
 1ba:	84 9b       	sbis	0x10, 4	; 16
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <main+0x6e>
 1be:	86 9b       	sbis	0x10, 6	; 16
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <main+0x6e>
		{
			currState = FORWARD;
 1c2:	b9 82       	std	Y+1, r11	; 0x01
			Forward(70);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	8c e8       	ldi	r24, 0x8C	; 140
 1ca:	92 e4       	ldi	r25, 0x42	; 66
 1cc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Forward>
 1d0:	f2 cf       	rjmp	.-28     	; 0x1b6 <main+0x52>
		}
		//Left on, right off
		else if(IS_BIT_CLEAR(PIND, PD6) && IS_BIT_SET(PIND, PD4))
 1d2:	86 99       	sbic	0x10, 6	; 16
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <main+0xd0>
 1d6:	84 9b       	sbis	0x10, 4	; 16
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <main+0xd0>
		{
			if(currState != FORWARDLEFT)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	87 34       	cpi	r24, 0x47	; 71
 1de:	29 f0       	breq	.+10     	; 0x1ea <main+0x86>
			{
				currState = FORWARDLEFT;
 1e0:	19 83       	std	Y+1, r17	; 0x01
				turnLeftSpeed = 0.5;
 1e2:	ca 82       	std	Y+2, r12	; 0x02
 1e4:	db 82       	std	Y+3, r13	; 0x03
 1e6:	ec 82       	std	Y+4, r14	; 0x04
 1e8:	fd 82       	std	Y+5, r15	; 0x05
			}
			ForwardLeftLF(70, turnLeftSpeed);
 1ea:	2a 81       	ldd	r18, Y+2	; 0x02
 1ec:	3b 81       	ldd	r19, Y+3	; 0x03
 1ee:	4c 81       	ldd	r20, Y+4	; 0x04
 1f0:	5d 81       	ldd	r21, Y+5	; 0x05
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	8c e8       	ldi	r24, 0x8C	; 140
 1f8:	92 e4       	ldi	r25, 0x42	; 66
 1fa:	0e 94 61 00 	call	0xc2	; 0xc2 <ForwardLeftLF>
			if(turnLeftSpeed > 0.3)
 1fe:	6a 81       	ldd	r22, Y+2	; 0x02
 200:	7b 81       	ldd	r23, Y+3	; 0x03
 202:	8c 81       	ldd	r24, Y+4	; 0x04
 204:	9d 81       	ldd	r25, Y+5	; 0x05
 206:	2a e9       	ldi	r18, 0x9A	; 154
 208:	39 e9       	ldi	r19, 0x99	; 153
 20a:	49 e9       	ldi	r20, 0x99	; 153
 20c:	5e e3       	ldi	r21, 0x3E	; 62
 20e:	0e 94 85 03 	call	0x70a	; 0x70a <__gesf2>
 212:	18 16       	cp	r1, r24
 214:	84 f6       	brge	.-96     	; 0x1b6 <main+0x52>
			{
				turnLeftSpeed -= 0.05; 
 216:	6a 81       	ldd	r22, Y+2	; 0x02
 218:	7b 81       	ldd	r23, Y+3	; 0x03
 21a:	8c 81       	ldd	r24, Y+4	; 0x04
 21c:	9d 81       	ldd	r25, Y+5	; 0x05
 21e:	2d ec       	ldi	r18, 0xCD	; 205
 220:	3c ec       	ldi	r19, 0xCC	; 204
 222:	4c e4       	ldi	r20, 0x4C	; 76
 224:	5d e3       	ldi	r21, 0x3D	; 61
 226:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
 22a:	6a 83       	std	Y+2, r22	; 0x02
 22c:	7b 83       	std	Y+3, r23	; 0x03
 22e:	8c 83       	std	Y+4, r24	; 0x04
 230:	9d 83       	std	Y+5, r25	; 0x05
 232:	c1 cf       	rjmp	.-126    	; 0x1b6 <main+0x52>
			}
		}
		else if(IS_BIT_SET(PIND, PD6) && IS_BIT_CLEAR(PIND, PD4))
 234:	86 9b       	sbis	0x10, 6	; 16
 236:	30 c0       	rjmp	.+96     	; 0x298 <main+0x134>
 238:	84 99       	sbic	0x10, 4	; 16
 23a:	2e c0       	rjmp	.+92     	; 0x298 <main+0x134>
		{
			if(currState != FORWARDRIGHT)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	89 34       	cpi	r24, 0x49	; 73
 240:	29 f0       	breq	.+10     	; 0x24c <main+0xe8>
			{
				currState = FORWARDRIGHT;
 242:	09 83       	std	Y+1, r16	; 0x01
				turnRightSpeed = 0.5;
 244:	ce 82       	std	Y+6, r12	; 0x06
 246:	df 82       	std	Y+7, r13	; 0x07
 248:	e8 86       	std	Y+8, r14	; 0x08
 24a:	f9 86       	std	Y+9, r15	; 0x09
			}
			ForwardRightLF(70, turnRightSpeed);
 24c:	2e 81       	ldd	r18, Y+6	; 0x06
 24e:	3f 81       	ldd	r19, Y+7	; 0x07
 250:	48 85       	ldd	r20, Y+8	; 0x08
 252:	59 85       	ldd	r21, Y+9	; 0x09
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	8c e8       	ldi	r24, 0x8C	; 140
 25a:	92 e4       	ldi	r25, 0x42	; 66
 25c:	0e 94 36 00 	call	0x6c	; 0x6c <ForwardRightLF>
			if(turnRightSpeed > 0.3)
 260:	6e 81       	ldd	r22, Y+6	; 0x06
 262:	7f 81       	ldd	r23, Y+7	; 0x07
 264:	88 85       	ldd	r24, Y+8	; 0x08
 266:	99 85       	ldd	r25, Y+9	; 0x09
 268:	2a e9       	ldi	r18, 0x9A	; 154
 26a:	39 e9       	ldi	r19, 0x99	; 153
 26c:	49 e9       	ldi	r20, 0x99	; 153
 26e:	5e e3       	ldi	r21, 0x3E	; 62
 270:	0e 94 85 03 	call	0x70a	; 0x70a <__gesf2>
 274:	18 16       	cp	r1, r24
 276:	0c f0       	brlt	.+2      	; 0x27a <main+0x116>
 278:	9e cf       	rjmp	.-196    	; 0x1b6 <main+0x52>
			{
				turnRightSpeed -= 0.05;
 27a:	6e 81       	ldd	r22, Y+6	; 0x06
 27c:	7f 81       	ldd	r23, Y+7	; 0x07
 27e:	88 85       	ldd	r24, Y+8	; 0x08
 280:	99 85       	ldd	r25, Y+9	; 0x09
 282:	2d ec       	ldi	r18, 0xCD	; 205
 284:	3c ec       	ldi	r19, 0xCC	; 204
 286:	4c e4       	ldi	r20, 0x4C	; 76
 288:	5d e3       	ldi	r21, 0x3D	; 61
 28a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
 28e:	6e 83       	std	Y+6, r22	; 0x06
 290:	7f 83       	std	Y+7, r23	; 0x07
 292:	88 87       	std	Y+8, r24	; 0x08
 294:	99 87       	std	Y+9, r25	; 0x09
 296:	8f cf       	rjmp	.-226    	; 0x1b6 <main+0x52>
			}
		}
		
		else if(IS_BIT_SET(PIND, PD6) && IS_BIT_SET(PIND, PD5) && IS_BIT_SET(PIND, PD4))
 298:	86 9b       	sbis	0x10, 6	; 16
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <main+0x146>
 29c:	85 9b       	sbis	0x10, 5	; 16
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <main+0x146>
 2a0:	84 9b       	sbis	0x10, 4	; 16
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <main+0x146>
		{
			Break();
 2a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Break>
 2a8:	86 cf       	rjmp	.-244    	; 0x1b6 <main+0x52>
		}
		else
		{
			 Break();
 2aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Break>
 2ae:	83 cf       	rjmp	.-250    	; 0x1b6 <main+0x52>

000002b0 <Forward>:
 */ 

#include "SteeringMech.h"

void Forward(float32 speed)
{
 2b0:	cf 93       	push	r28
	set_speed_ML(speed);
 2b2:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
 2b6:	c6 2f       	mov	r28, r22
 2b8:	86 2f       	mov	r24, r22
 2ba:	0e 94 8a 01 	call	0x314	; 0x314 <set_speed_ML>
	set_speed_MR(speed);
 2be:	8c 2f       	mov	r24, r28
 2c0:	0e 94 bf 01 	call	0x37e	; 0x37e <set_speed_MR>
	set_direction_ML(CW);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
	set_direction_MR(CW);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <Break>:
	set_direction_ML(direction);
	set_direction_MR(direction);
}
void Break()
{
	set_speed_ML(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 8a 01 	call	0x314	; 0x314 <set_speed_ML>
	set_speed_MR(0);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 bf 01 	call	0x37e	; 0x37e <set_speed_MR>
 2e0:	08 95       	ret

000002e2 <Timer0_PC_PWMinit>:
 */ 

#include "Timer0.h"
void Timer0_PC_PWMinit(void)
{
	TCNT0=0;	//count = 0 initially
 2e2:	12 be       	out	0x32, r1	; 50
	OCR0=0;		//compare match value = 0 initially
 2e4:	1c be       	out	0x3c, r1	; 60
	/*TCCR0 |= (1<<WGM00) | (1<<COM01) | (1<<CS00);*/
	/*PC PWM Settings*/
	SET_BIT(TCCR0,WGM00);
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM01);
 2ec:	83 b7       	in	r24, 0x33	; 51
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	83 bf       	out	0x33, r24	; 51
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR0,COM01);
 2f2:	83 b7       	in	r24, 0x33	; 51
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
 2f8:	83 b7       	in	r24, 0x33	; 51
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	83 bf       	out	0x33, r24	; 51
	/*Select prescalar=8*/
	SET_BIT(TCCR0,CS01);
 2fe:	83 b7       	in	r24, 0x33	; 51
 300:	82 60       	ori	r24, 0x02	; 2
 302:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS00);
 304:	83 b7       	in	r24, 0x33	; 51
 306:	8e 7f       	andi	r24, 0xFE	; 254
 308:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	83 bf       	out	0x33, r24	; 51
	/*Setting pin OC0 to be output*/
	SET_BIT(DDRB,PB3);
 310:	bb 9a       	sbi	0x17, 3	; 23
 312:	08 95       	ret

00000314 <set_speed_ML>:
}
void set_speed_ML(uint8 duty_cycle) //set_dutyCycle_Timer0 // takes decimal
{
	OCR0 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 314:	68 2f       	mov	r22, r24
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatsisf>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	48 ec       	ldi	r20, 0xC8	; 200
 326:	52 e4       	ldi	r21, 0x42	; 66
 328:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	4f e7       	ldi	r20, 0x7F	; 127
 332:	53 e4       	ldi	r21, 0x43	; 67
 334:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	5f e3       	ldi	r21, 0x3F	; 63
 340:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__addsf3>
 344:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
 348:	6c bf       	out	0x3c, r22	; 60
 34a:	08 95       	ret

0000034c <Timer2_PC_PWMinit>:
 */ 

#include "Timer2.h"
void Timer2_PC_PWMinit(void)
{
	TCNT2=0;	//count = 0 initially
 34c:	14 bc       	out	0x24, r1	; 36
	OCR2=0;		//compare match value = 0 initially
 34e:	13 bc       	out	0x23, r1	; 35
	/*PC PWM Settings*/
	SET_BIT(TCCR2,WGM20);
 350:	85 b5       	in	r24, 0x25	; 37
 352:	80 64       	ori	r24, 0x40	; 64
 354:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,WGM21);
 356:	85 b5       	in	r24, 0x25	; 37
 358:	87 7f       	andi	r24, 0xF7	; 247
 35a:	85 bd       	out	0x25, r24	; 37
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR2,COM21);
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,COM20);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	8f 7e       	andi	r24, 0xEF	; 239
 366:	85 bd       	out	0x25, r24	; 37
	/*Set prescalar to 8*/
	SET_BIT(TCCR2,CS21);
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS22);
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	8b 7f       	andi	r24, 0xFB	; 251
 372:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS20);
 374:	85 b5       	in	r24, 0x25	; 37
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	85 bd       	out	0x25, r24	; 37
	/*Setting pin OC2 to be output*/
	SET_BIT(DDRD, PD7);
 37a:	8f 9a       	sbi	0x11, 7	; 17
 37c:	08 95       	ret

0000037e <set_speed_MR>:
}
void set_speed_MR(uint8 duty_cycle) //set_dutyCycle_Timer2 // takes decimal
{
	OCR2 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 37e:	68 2f       	mov	r22, r24
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatsisf>
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	48 ec       	ldi	r20, 0xC8	; 200
 390:	52 e4       	ldi	r21, 0x42	; 66
 392:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4f e7       	ldi	r20, 0x7F	; 127
 39c:	53 e4       	ldi	r21, 0x43	; 67
 39e:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	5f e3       	ldi	r21, 0x3F	; 63
 3aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__addsf3>
 3ae:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
 3b2:	63 bd       	out	0x23, r22	; 35
 3b4:	08 95       	ret

000003b6 <UART_init>:
 3b6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__floatunsisf>
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	51 e4       	ldi	r21, 0x41	; 65
 3c2:	0e 94 89 03 	call	0x712	; 0x712 <__mulsf3>
 3c6:	9b 01       	movw	r18, r22
 3c8:	ac 01       	movw	r20, r24
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	74 e2       	ldi	r23, 0x24	; 36
 3ce:	84 e7       	ldi	r24, 0x74	; 116
 3d0:	99 e4       	ldi	r25, 0x49	; 73
 3d2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e8       	ldi	r20, 0x80	; 128
 3dc:	5f e3       	ldi	r21, 0x3F	; 63
 3de:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
 3e2:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
 3e6:	59 9a       	sbi	0x0b, 1	; 11
 3e8:	8a b1       	in	r24, 0x0a	; 10
 3ea:	88 61       	ori	r24, 0x18	; 24
 3ec:	8a b9       	out	0x0a, r24	; 10
 3ee:	80 b5       	in	r24, 0x20	; 32
 3f0:	86 68       	ori	r24, 0x86	; 134
 3f2:	80 bd       	out	0x20, r24	; 32
 3f4:	52 98       	cbi	0x0a, 2	; 10
 3f6:	69 b9       	out	0x09, r22	; 9
 3f8:	70 bd       	out	0x20, r23	; 32
 3fa:	08 95       	ret

000003fc <__subsf3>:
 3fc:	50 58       	subi	r21, 0x80	; 128

000003fe <__addsf3>:
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	0e d0       	rcall	.+28     	; 0x420 <__addsf3x>
 404:	48 c1       	rjmp	.+656    	; 0x696 <__fp_round>
 406:	39 d1       	rcall	.+626    	; 0x67a <__fp_pscA>
 408:	30 f0       	brcs	.+12     	; 0x416 <__addsf3+0x18>
 40a:	3e d1       	rcall	.+636    	; 0x688 <__fp_pscB>
 40c:	20 f0       	brcs	.+8      	; 0x416 <__addsf3+0x18>
 40e:	31 f4       	brne	.+12     	; 0x41c <__addsf3+0x1e>
 410:	9f 3f       	cpi	r25, 0xFF	; 255
 412:	11 f4       	brne	.+4      	; 0x418 <__addsf3+0x1a>
 414:	1e f4       	brtc	.+6      	; 0x41c <__addsf3+0x1e>
 416:	2e c1       	rjmp	.+604    	; 0x674 <__fp_nan>
 418:	0e f4       	brtc	.+2      	; 0x41c <__addsf3+0x1e>
 41a:	e0 95       	com	r30
 41c:	e7 fb       	bst	r30, 7
 41e:	24 c1       	rjmp	.+584    	; 0x668 <__fp_inf>

00000420 <__addsf3x>:
 420:	e9 2f       	mov	r30, r25
 422:	4a d1       	rcall	.+660    	; 0x6b8 <__fp_split3>
 424:	80 f3       	brcs	.-32     	; 0x406 <__addsf3+0x8>
 426:	ba 17       	cp	r27, r26
 428:	62 07       	cpc	r22, r18
 42a:	73 07       	cpc	r23, r19
 42c:	84 07       	cpc	r24, r20
 42e:	95 07       	cpc	r25, r21
 430:	18 f0       	brcs	.+6      	; 0x438 <__addsf3x+0x18>
 432:	71 f4       	brne	.+28     	; 0x450 <__addsf3x+0x30>
 434:	9e f5       	brtc	.+102    	; 0x49c <__addsf3x+0x7c>
 436:	62 c1       	rjmp	.+708    	; 0x6fc <__fp_zero>
 438:	0e f4       	brtc	.+2      	; 0x43c <__addsf3x+0x1c>
 43a:	e0 95       	com	r30
 43c:	0b 2e       	mov	r0, r27
 43e:	ba 2f       	mov	r27, r26
 440:	a0 2d       	mov	r26, r0
 442:	0b 01       	movw	r0, r22
 444:	b9 01       	movw	r22, r18
 446:	90 01       	movw	r18, r0
 448:	0c 01       	movw	r0, r24
 44a:	ca 01       	movw	r24, r20
 44c:	a0 01       	movw	r20, r0
 44e:	11 24       	eor	r1, r1
 450:	ff 27       	eor	r31, r31
 452:	59 1b       	sub	r21, r25
 454:	99 f0       	breq	.+38     	; 0x47c <__addsf3x+0x5c>
 456:	59 3f       	cpi	r21, 0xF9	; 249
 458:	50 f4       	brcc	.+20     	; 0x46e <__addsf3x+0x4e>
 45a:	50 3e       	cpi	r21, 0xE0	; 224
 45c:	68 f1       	brcs	.+90     	; 0x4b8 <__addsf3x+0x98>
 45e:	1a 16       	cp	r1, r26
 460:	f0 40       	sbci	r31, 0x00	; 0
 462:	a2 2f       	mov	r26, r18
 464:	23 2f       	mov	r18, r19
 466:	34 2f       	mov	r19, r20
 468:	44 27       	eor	r20, r20
 46a:	58 5f       	subi	r21, 0xF8	; 248
 46c:	f3 cf       	rjmp	.-26     	; 0x454 <__addsf3x+0x34>
 46e:	46 95       	lsr	r20
 470:	37 95       	ror	r19
 472:	27 95       	ror	r18
 474:	a7 95       	ror	r26
 476:	f0 40       	sbci	r31, 0x00	; 0
 478:	53 95       	inc	r21
 47a:	c9 f7       	brne	.-14     	; 0x46e <__addsf3x+0x4e>
 47c:	7e f4       	brtc	.+30     	; 0x49c <__addsf3x+0x7c>
 47e:	1f 16       	cp	r1, r31
 480:	ba 0b       	sbc	r27, r26
 482:	62 0b       	sbc	r22, r18
 484:	73 0b       	sbc	r23, r19
 486:	84 0b       	sbc	r24, r20
 488:	ba f0       	brmi	.+46     	; 0x4b8 <__addsf3x+0x98>
 48a:	91 50       	subi	r25, 0x01	; 1
 48c:	a1 f0       	breq	.+40     	; 0x4b6 <__addsf3x+0x96>
 48e:	ff 0f       	add	r31, r31
 490:	bb 1f       	adc	r27, r27
 492:	66 1f       	adc	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	c2 f7       	brpl	.-16     	; 0x48a <__addsf3x+0x6a>
 49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__addsf3x+0x98>
 49c:	ba 0f       	add	r27, r26
 49e:	62 1f       	adc	r22, r18
 4a0:	73 1f       	adc	r23, r19
 4a2:	84 1f       	adc	r24, r20
 4a4:	48 f4       	brcc	.+18     	; 0x4b8 <__addsf3x+0x98>
 4a6:	87 95       	ror	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f7 95       	ror	r31
 4b0:	9e 3f       	cpi	r25, 0xFE	; 254
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__addsf3x+0x96>
 4b4:	b3 cf       	rjmp	.-154    	; 0x41c <__addsf3+0x1e>
 4b6:	93 95       	inc	r25
 4b8:	88 0f       	add	r24, r24
 4ba:	08 f0       	brcs	.+2      	; 0x4be <__addsf3x+0x9e>
 4bc:	99 27       	eor	r25, r25
 4be:	ee 0f       	add	r30, r30
 4c0:	97 95       	ror	r25
 4c2:	87 95       	ror	r24
 4c4:	08 95       	ret

000004c6 <__divsf3>:
 4c6:	0c d0       	rcall	.+24     	; 0x4e0 <__divsf3x>
 4c8:	e6 c0       	rjmp	.+460    	; 0x696 <__fp_round>
 4ca:	de d0       	rcall	.+444    	; 0x688 <__fp_pscB>
 4cc:	40 f0       	brcs	.+16     	; 0x4de <__divsf3+0x18>
 4ce:	d5 d0       	rcall	.+426    	; 0x67a <__fp_pscA>
 4d0:	30 f0       	brcs	.+12     	; 0x4de <__divsf3+0x18>
 4d2:	21 f4       	brne	.+8      	; 0x4dc <__divsf3+0x16>
 4d4:	5f 3f       	cpi	r21, 0xFF	; 255
 4d6:	19 f0       	breq	.+6      	; 0x4de <__divsf3+0x18>
 4d8:	c7 c0       	rjmp	.+398    	; 0x668 <__fp_inf>
 4da:	51 11       	cpse	r21, r1
 4dc:	10 c1       	rjmp	.+544    	; 0x6fe <__fp_szero>
 4de:	ca c0       	rjmp	.+404    	; 0x674 <__fp_nan>

000004e0 <__divsf3x>:
 4e0:	eb d0       	rcall	.+470    	; 0x6b8 <__fp_split3>
 4e2:	98 f3       	brcs	.-26     	; 0x4ca <__divsf3+0x4>

000004e4 <__divsf3_pse>:
 4e4:	99 23       	and	r25, r25
 4e6:	c9 f3       	breq	.-14     	; 0x4da <__divsf3+0x14>
 4e8:	55 23       	and	r21, r21
 4ea:	b1 f3       	breq	.-20     	; 0x4d8 <__divsf3+0x12>
 4ec:	95 1b       	sub	r25, r21
 4ee:	55 0b       	sbc	r21, r21
 4f0:	bb 27       	eor	r27, r27
 4f2:	aa 27       	eor	r26, r26
 4f4:	62 17       	cp	r22, r18
 4f6:	73 07       	cpc	r23, r19
 4f8:	84 07       	cpc	r24, r20
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__divsf3_pse+0x26>
 4fc:	9f 5f       	subi	r25, 0xFF	; 255
 4fe:	5f 4f       	sbci	r21, 0xFF	; 255
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	44 1f       	adc	r20, r20
 506:	aa 1f       	adc	r26, r26
 508:	a9 f3       	breq	.-22     	; 0x4f4 <__divsf3_pse+0x10>
 50a:	33 d0       	rcall	.+102    	; 0x572 <__divsf3_pse+0x8e>
 50c:	0e 2e       	mov	r0, r30
 50e:	3a f0       	brmi	.+14     	; 0x51e <__divsf3_pse+0x3a>
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	30 d0       	rcall	.+96     	; 0x574 <__divsf3_pse+0x90>
 514:	91 50       	subi	r25, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	e6 95       	lsr	r30
 51a:	00 1c       	adc	r0, r0
 51c:	ca f7       	brpl	.-14     	; 0x510 <__divsf3_pse+0x2c>
 51e:	29 d0       	rcall	.+82     	; 0x572 <__divsf3_pse+0x8e>
 520:	fe 2f       	mov	r31, r30
 522:	27 d0       	rcall	.+78     	; 0x572 <__divsf3_pse+0x8e>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	bb 1f       	adc	r27, r27
 52c:	26 17       	cp	r18, r22
 52e:	37 07       	cpc	r19, r23
 530:	48 07       	cpc	r20, r24
 532:	ab 07       	cpc	r26, r27
 534:	b0 e8       	ldi	r27, 0x80	; 128
 536:	09 f0       	breq	.+2      	; 0x53a <__divsf3_pse+0x56>
 538:	bb 0b       	sbc	r27, r27
 53a:	80 2d       	mov	r24, r0
 53c:	bf 01       	movw	r22, r30
 53e:	ff 27       	eor	r31, r31
 540:	93 58       	subi	r25, 0x83	; 131
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	2a f0       	brmi	.+10     	; 0x550 <__divsf3_pse+0x6c>
 546:	9e 3f       	cpi	r25, 0xFE	; 254
 548:	51 05       	cpc	r21, r1
 54a:	68 f0       	brcs	.+26     	; 0x566 <__divsf3_pse+0x82>
 54c:	8d c0       	rjmp	.+282    	; 0x668 <__fp_inf>
 54e:	d7 c0       	rjmp	.+430    	; 0x6fe <__fp_szero>
 550:	5f 3f       	cpi	r21, 0xFF	; 255
 552:	ec f3       	brlt	.-6      	; 0x54e <__divsf3_pse+0x6a>
 554:	98 3e       	cpi	r25, 0xE8	; 232
 556:	dc f3       	brlt	.-10     	; 0x54e <__divsf3_pse+0x6a>
 558:	86 95       	lsr	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f7 95       	ror	r31
 562:	9f 5f       	subi	r25, 0xFF	; 255
 564:	c9 f7       	brne	.-14     	; 0x558 <__divsf3_pse+0x74>
 566:	88 0f       	add	r24, r24
 568:	91 1d       	adc	r25, r1
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	97 f9       	bld	r25, 7
 570:	08 95       	ret
 572:	e1 e0       	ldi	r30, 0x01	; 1
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	bb 1f       	adc	r27, r27
 57c:	62 17       	cp	r22, r18
 57e:	73 07       	cpc	r23, r19
 580:	84 07       	cpc	r24, r20
 582:	ba 07       	cpc	r27, r26
 584:	20 f0       	brcs	.+8      	; 0x58e <__divsf3_pse+0xaa>
 586:	62 1b       	sub	r22, r18
 588:	73 0b       	sbc	r23, r19
 58a:	84 0b       	sbc	r24, r20
 58c:	ba 0b       	sbc	r27, r26
 58e:	ee 1f       	adc	r30, r30
 590:	88 f7       	brcc	.-30     	; 0x574 <__divsf3_pse+0x90>
 592:	e0 95       	com	r30
 594:	08 95       	ret

00000596 <__fixunssfsi>:
 596:	98 d0       	rcall	.+304    	; 0x6c8 <__fp_splitA>
 598:	88 f0       	brcs	.+34     	; 0x5bc <__fixunssfsi+0x26>
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	90 f0       	brcs	.+36     	; 0x5c2 <__fixunssfsi+0x2c>
 59e:	b9 2f       	mov	r27, r25
 5a0:	99 27       	eor	r25, r25
 5a2:	b7 51       	subi	r27, 0x17	; 23
 5a4:	a0 f0       	brcs	.+40     	; 0x5ce <__fixunssfsi+0x38>
 5a6:	d1 f0       	breq	.+52     	; 0x5dc <__fixunssfsi+0x46>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a f0       	brmi	.+6      	; 0x5b8 <__fixunssfsi+0x22>
 5b2:	ba 95       	dec	r27
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__fixunssfsi+0x12>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <__fixunssfsi+0x46>
 5b8:	b1 30       	cpi	r27, 0x01	; 1
 5ba:	81 f0       	breq	.+32     	; 0x5dc <__fixunssfsi+0x46>
 5bc:	9f d0       	rcall	.+318    	; 0x6fc <__fp_zero>
 5be:	b1 e0       	ldi	r27, 0x01	; 1
 5c0:	08 95       	ret
 5c2:	9c c0       	rjmp	.+312    	; 0x6fc <__fp_zero>
 5c4:	67 2f       	mov	r22, r23
 5c6:	78 2f       	mov	r23, r24
 5c8:	88 27       	eor	r24, r24
 5ca:	b8 5f       	subi	r27, 0xF8	; 248
 5cc:	39 f0       	breq	.+14     	; 0x5dc <__fixunssfsi+0x46>
 5ce:	b9 3f       	cpi	r27, 0xF9	; 249
 5d0:	cc f3       	brlt	.-14     	; 0x5c4 <__fixunssfsi+0x2e>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b3 95       	inc	r27
 5da:	d9 f7       	brne	.-10     	; 0x5d2 <__fixunssfsi+0x3c>
 5dc:	3e f4       	brtc	.+14     	; 0x5ec <__fixunssfsi+0x56>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__floatunsisf>:
 5ee:	e8 94       	clt
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <__floatsisf+0x12>

000005f2 <__floatsisf>:
 5f2:	97 fb       	bst	r25, 7
 5f4:	3e f4       	brtc	.+14     	; 0x604 <__floatsisf+0x12>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	99 23       	and	r25, r25
 606:	a9 f0       	breq	.+42     	; 0x632 <__floatsisf+0x40>
 608:	f9 2f       	mov	r31, r25
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	bb 27       	eor	r27, r27
 60e:	93 95       	inc	r25
 610:	f6 95       	lsr	r31
 612:	87 95       	ror	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f1 11       	cpse	r31, r1
 61c:	f8 cf       	rjmp	.-16     	; 0x60e <__floatsisf+0x1c>
 61e:	fa f4       	brpl	.+62     	; 0x65e <__floatsisf+0x6c>
 620:	bb 0f       	add	r27, r27
 622:	11 f4       	brne	.+4      	; 0x628 <__floatsisf+0x36>
 624:	60 ff       	sbrs	r22, 0
 626:	1b c0       	rjmp	.+54     	; 0x65e <__floatsisf+0x6c>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	16 c0       	rjmp	.+44     	; 0x65e <__floatsisf+0x6c>
 632:	88 23       	and	r24, r24
 634:	11 f0       	breq	.+4      	; 0x63a <__floatsisf+0x48>
 636:	96 e9       	ldi	r25, 0x96	; 150
 638:	11 c0       	rjmp	.+34     	; 0x65c <__floatsisf+0x6a>
 63a:	77 23       	and	r23, r23
 63c:	21 f0       	breq	.+8      	; 0x646 <__floatsisf+0x54>
 63e:	9e e8       	ldi	r25, 0x8E	; 142
 640:	87 2f       	mov	r24, r23
 642:	76 2f       	mov	r23, r22
 644:	05 c0       	rjmp	.+10     	; 0x650 <__floatsisf+0x5e>
 646:	66 23       	and	r22, r22
 648:	71 f0       	breq	.+28     	; 0x666 <__floatsisf+0x74>
 64a:	96 e8       	ldi	r25, 0x86	; 134
 64c:	86 2f       	mov	r24, r22
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	2a f0       	brmi	.+10     	; 0x65e <__floatsisf+0x6c>
 654:	9a 95       	dec	r25
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	da f7       	brpl	.-10     	; 0x654 <__floatsisf+0x62>
 65e:	88 0f       	add	r24, r24
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret

00000668 <__fp_inf>:
 668:	97 f9       	bld	r25, 7
 66a:	9f 67       	ori	r25, 0x7F	; 127
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	08 95       	ret

00000674 <__fp_nan>:
 674:	9f ef       	ldi	r25, 0xFF	; 255
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	08 95       	ret

0000067a <__fp_pscA>:
 67a:	00 24       	eor	r0, r0
 67c:	0a 94       	dec	r0
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	09 06       	cpc	r0, r25
 686:	08 95       	ret

00000688 <__fp_pscB>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	05 06       	cpc	r0, r21
 694:	08 95       	ret

00000696 <__fp_round>:
 696:	09 2e       	mov	r0, r25
 698:	03 94       	inc	r0
 69a:	00 0c       	add	r0, r0
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__fp_round+0xc>
 69e:	88 23       	and	r24, r24
 6a0:	52 f0       	brmi	.+20     	; 0x6b6 <__fp_round+0x20>
 6a2:	bb 0f       	add	r27, r27
 6a4:	40 f4       	brcc	.+16     	; 0x6b6 <__fp_round+0x20>
 6a6:	bf 2b       	or	r27, r31
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0x18>
 6aa:	60 ff       	sbrs	r22, 0
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__fp_round+0x20>
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__fp_split3>:
 6b8:	57 fd       	sbrc	r21, 7
 6ba:	90 58       	subi	r25, 0x80	; 128
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <__fp_splitA+0x10>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <__fp_splitA+0x1a>
 6c6:	47 95       	ror	r20

000006c8 <__fp_splitA>:
 6c8:	88 0f       	add	r24, r24
 6ca:	97 fb       	bst	r25, 7
 6cc:	99 1f       	adc	r25, r25
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_splitA+0x20>
 6d0:	9f 3f       	cpi	r25, 0xFF	; 255
 6d2:	79 f0       	breq	.+30     	; 0x6f2 <__fp_splitA+0x2a>
 6d4:	87 95       	ror	r24
 6d6:	08 95       	ret
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	f2 cf       	rjmp	.-28     	; 0x6c6 <__fp_split3+0xe>
 6e2:	46 95       	lsr	r20
 6e4:	f1 df       	rcall	.-30     	; 0x6c8 <__fp_splitA>
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <__fp_splitA+0x30>
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	18 06       	cpc	r1, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	f1 cf       	rjmp	.-30     	; 0x6d4 <__fp_splitA+0xc>
 6f2:	86 95       	lsr	r24
 6f4:	71 05       	cpc	r23, r1
 6f6:	61 05       	cpc	r22, r1
 6f8:	08 94       	sec
 6fa:	08 95       	ret

000006fc <__fp_zero>:
 6fc:	e8 94       	clt

000006fe <__fp_szero>:
 6fe:	bb 27       	eor	r27, r27
 700:	66 27       	eor	r22, r22
 702:	77 27       	eor	r23, r23
 704:	cb 01       	movw	r24, r22
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <__gesf2>:
 70a:	66 d0       	rcall	.+204    	; 0x7d8 <__fp_cmp>
 70c:	08 f4       	brcc	.+2      	; 0x710 <__gesf2+0x6>
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	08 95       	ret

00000712 <__mulsf3>:
 712:	0b d0       	rcall	.+22     	; 0x72a <__mulsf3x>
 714:	c0 cf       	rjmp	.-128    	; 0x696 <__fp_round>
 716:	b1 df       	rcall	.-158    	; 0x67a <__fp_pscA>
 718:	28 f0       	brcs	.+10     	; 0x724 <__mulsf3+0x12>
 71a:	b6 df       	rcall	.-148    	; 0x688 <__fp_pscB>
 71c:	18 f0       	brcs	.+6      	; 0x724 <__mulsf3+0x12>
 71e:	95 23       	and	r25, r21
 720:	09 f0       	breq	.+2      	; 0x724 <__mulsf3+0x12>
 722:	a2 cf       	rjmp	.-188    	; 0x668 <__fp_inf>
 724:	a7 cf       	rjmp	.-178    	; 0x674 <__fp_nan>
 726:	11 24       	eor	r1, r1
 728:	ea cf       	rjmp	.-44     	; 0x6fe <__fp_szero>

0000072a <__mulsf3x>:
 72a:	c6 df       	rcall	.-116    	; 0x6b8 <__fp_split3>
 72c:	a0 f3       	brcs	.-24     	; 0x716 <__mulsf3+0x4>

0000072e <__mulsf3_pse>:
 72e:	95 9f       	mul	r25, r21
 730:	d1 f3       	breq	.-12     	; 0x726 <__mulsf3+0x14>
 732:	95 0f       	add	r25, r21
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	55 1f       	adc	r21, r21
 738:	62 9f       	mul	r22, r18
 73a:	f0 01       	movw	r30, r0
 73c:	72 9f       	mul	r23, r18
 73e:	bb 27       	eor	r27, r27
 740:	f0 0d       	add	r31, r0
 742:	b1 1d       	adc	r27, r1
 744:	63 9f       	mul	r22, r19
 746:	aa 27       	eor	r26, r26
 748:	f0 0d       	add	r31, r0
 74a:	b1 1d       	adc	r27, r1
 74c:	aa 1f       	adc	r26, r26
 74e:	64 9f       	mul	r22, r20
 750:	66 27       	eor	r22, r22
 752:	b0 0d       	add	r27, r0
 754:	a1 1d       	adc	r26, r1
 756:	66 1f       	adc	r22, r22
 758:	82 9f       	mul	r24, r18
 75a:	22 27       	eor	r18, r18
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	62 1f       	adc	r22, r18
 762:	73 9f       	mul	r23, r19
 764:	b0 0d       	add	r27, r0
 766:	a1 1d       	adc	r26, r1
 768:	62 1f       	adc	r22, r18
 76a:	83 9f       	mul	r24, r19
 76c:	a0 0d       	add	r26, r0
 76e:	61 1d       	adc	r22, r1
 770:	22 1f       	adc	r18, r18
 772:	74 9f       	mul	r23, r20
 774:	33 27       	eor	r19, r19
 776:	a0 0d       	add	r26, r0
 778:	61 1d       	adc	r22, r1
 77a:	23 1f       	adc	r18, r19
 77c:	84 9f       	mul	r24, r20
 77e:	60 0d       	add	r22, r0
 780:	21 1d       	adc	r18, r1
 782:	82 2f       	mov	r24, r18
 784:	76 2f       	mov	r23, r22
 786:	6a 2f       	mov	r22, r26
 788:	11 24       	eor	r1, r1
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	8a f0       	brmi	.+34     	; 0x7b2 <__mulsf3_pse+0x84>
 790:	e1 f0       	breq	.+56     	; 0x7ca <__mulsf3_pse+0x9c>
 792:	88 23       	and	r24, r24
 794:	4a f0       	brmi	.+18     	; 0x7a8 <__mulsf3_pse+0x7a>
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	bb 1f       	adc	r27, r27
 79c:	66 1f       	adc	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	91 50       	subi	r25, 0x01	; 1
 7a4:	50 40       	sbci	r21, 0x00	; 0
 7a6:	a9 f7       	brne	.-22     	; 0x792 <__mulsf3_pse+0x64>
 7a8:	9e 3f       	cpi	r25, 0xFE	; 254
 7aa:	51 05       	cpc	r21, r1
 7ac:	70 f0       	brcs	.+28     	; 0x7ca <__mulsf3_pse+0x9c>
 7ae:	5c cf       	rjmp	.-328    	; 0x668 <__fp_inf>
 7b0:	a6 cf       	rjmp	.-180    	; 0x6fe <__fp_szero>
 7b2:	5f 3f       	cpi	r21, 0xFF	; 255
 7b4:	ec f3       	brlt	.-6      	; 0x7b0 <__mulsf3_pse+0x82>
 7b6:	98 3e       	cpi	r25, 0xE8	; 232
 7b8:	dc f3       	brlt	.-10     	; 0x7b0 <__mulsf3_pse+0x82>
 7ba:	86 95       	lsr	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f7 95       	ror	r31
 7c4:	e7 95       	ror	r30
 7c6:	9f 5f       	subi	r25, 0xFF	; 255
 7c8:	c1 f7       	brne	.-16     	; 0x7ba <__mulsf3_pse+0x8c>
 7ca:	fe 2b       	or	r31, r30
 7cc:	88 0f       	add	r24, r24
 7ce:	91 1d       	adc	r25, r1
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__fp_cmp>:
 7d8:	99 0f       	add	r25, r25
 7da:	00 08       	sbc	r0, r0
 7dc:	55 0f       	add	r21, r21
 7de:	aa 0b       	sbc	r26, r26
 7e0:	e0 e8       	ldi	r30, 0x80	; 128
 7e2:	fe ef       	ldi	r31, 0xFE	; 254
 7e4:	16 16       	cp	r1, r22
 7e6:	17 06       	cpc	r1, r23
 7e8:	e8 07       	cpc	r30, r24
 7ea:	f9 07       	cpc	r31, r25
 7ec:	c0 f0       	brcs	.+48     	; 0x81e <__fp_cmp+0x46>
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	e4 07       	cpc	r30, r20
 7f4:	f5 07       	cpc	r31, r21
 7f6:	98 f0       	brcs	.+38     	; 0x81e <__fp_cmp+0x46>
 7f8:	62 1b       	sub	r22, r18
 7fa:	73 0b       	sbc	r23, r19
 7fc:	84 0b       	sbc	r24, r20
 7fe:	95 0b       	sbc	r25, r21
 800:	39 f4       	brne	.+14     	; 0x810 <__fp_cmp+0x38>
 802:	0a 26       	eor	r0, r26
 804:	61 f0       	breq	.+24     	; 0x81e <__fp_cmp+0x46>
 806:	23 2b       	or	r18, r19
 808:	24 2b       	or	r18, r20
 80a:	25 2b       	or	r18, r21
 80c:	21 f4       	brne	.+8      	; 0x816 <__fp_cmp+0x3e>
 80e:	08 95       	ret
 810:	0a 26       	eor	r0, r26
 812:	09 f4       	brne	.+2      	; 0x816 <__fp_cmp+0x3e>
 814:	a1 40       	sbci	r26, 0x01	; 1
 816:	a6 95       	lsr	r26
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	81 1d       	adc	r24, r1
 81c:	81 1d       	adc	r24, r1
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
