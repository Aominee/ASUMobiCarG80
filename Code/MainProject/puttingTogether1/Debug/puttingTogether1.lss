
puttingTogether1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000168  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000c45  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000004fd  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000006d6  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000300  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000003a0  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000007c9  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f8  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  64:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ForwardRightLF>:
 *  Author: Matt
 */
#include "LineFollower.h" 

void ForwardRightLF(float32 speed, float32 degree)
{
  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	6b 01       	movw	r12, r22
  7e:	7c 01       	movw	r14, r24
  80:	49 01       	movw	r8, r18
  82:	5a 01       	movw	r10, r20
	set_speed_ML(speed);
  84:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
  88:	86 2f       	mov	r24, r22
  8a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_speed_ML>
	set_speed_MR(degree*speed);
  8e:	a7 01       	movw	r20, r14
  90:	96 01       	movw	r18, r12
  92:	c5 01       	movw	r24, r10
  94:	b4 01       	movw	r22, r8
  96:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
  9a:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
  9e:	86 2f       	mov	r24, r22
  a0:	0e 94 b4 01 	call	0x368	; 0x368 <set_speed_MR>
	set_direction_ML(CW);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
	set_direction_MR(CW);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
}
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	08 95       	ret

000000c2 <ForwardLeftLF>:
void ForwardLeftLF(float32 speed, float32 degree)
{
  c2:	8f 92       	push	r8
  c4:	9f 92       	push	r9
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	6b 01       	movw	r12, r22
  d4:	7c 01       	movw	r14, r24
  d6:	49 01       	movw	r8, r18
  d8:	5a 01       	movw	r10, r20
	set_speed_MR(speed);
  da:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
  de:	86 2f       	mov	r24, r22
  e0:	0e 94 b4 01 	call	0x368	; 0x368 <set_speed_MR>
	set_speed_ML(speed*degree);
  e4:	a5 01       	movw	r20, r10
  e6:	94 01       	movw	r18, r8
  e8:	c7 01       	movw	r24, r14
  ea:	b6 01       	movw	r22, r12
  ec:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
  f0:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
  f4:	86 2f       	mov	r24, r22
  f6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_speed_ML>
	set_direction_MR(CW);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
	set_direction_ML(CW);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
}
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	df 90       	pop	r13
 10c:	cf 90       	pop	r12
 10e:	bf 90       	pop	r11
 110:	af 90       	pop	r10
 112:	9f 90       	pop	r9
 114:	8f 90       	pop	r8
 116:	08 95       	ret

00000118 <driver_init>:

#include "MotorDriver.h"

void driver_init()
{
	SET_BIT(DDRA,ML_IN1);
 118:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,ML_IN2);
 11a:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,MR_IN1);
 11c:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,MR_IN2);
 11e:	d3 9a       	sbi	0x1a, 3	; 26
 120:	08 95       	ret

00000122 <set_direction_ML>:
}
void set_direction_ML(uint8 direction)
{
	if(direction == CW)
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <set_direction_ML+0xa>
	{
		CLEAR_BIT(PORTA, ML_IN1);
 126:	d8 98       	cbi	0x1b, 0	; 27
		SET_BIT(PORTA, ML_IN2);
 128:	d9 9a       	sbi	0x1b, 1	; 27
 12a:	08 95       	ret
	}
	else if (direction == ACW)
 12c:	81 11       	cpse	r24, r1
 12e:	02 c0       	rjmp	.+4      	; 0x134 <set_direction_ML+0x12>
	{
		SET_BIT(PORTA, ML_IN1);
 130:	d8 9a       	sbi	0x1b, 0	; 27
		CLEAR_BIT(PORTA, ML_IN2);
 132:	d9 98       	cbi	0x1b, 1	; 27
 134:	08 95       	ret

00000136 <set_direction_MR>:
	} 
}
void set_direction_MR(uint8 direction)
{
	if(direction == CW)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <set_direction_MR+0xa>
	{
		CLEAR_BIT(PORTA, MR_IN1);
 13a:	da 98       	cbi	0x1b, 2	; 27
		SET_BIT(PORTA, MR_IN2);
 13c:	db 9a       	sbi	0x1b, 3	; 27
 13e:	08 95       	ret
	}
	else if (direction == ACW)
 140:	81 11       	cpse	r24, r1
 142:	02 c0       	rjmp	.+4      	; 0x148 <set_direction_MR+0x12>
	{
		
		SET_BIT(PORTA, MR_IN1);
 144:	da 9a       	sbi	0x1b, 2	; 27
		CLEAR_BIT(PORTA, MR_IN2);
 146:	db 98       	cbi	0x1b, 3	; 27
 148:	08 95       	ret

0000014a <init>:
	}
}

void init()
{
	Timer0_PC_PWMinit();
 14a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Timer0_PC_PWMinit>
	Timer2_PC_PWMinit();
 14e:	0e 94 9b 01 	call	0x336	; 0x336 <Timer2_PC_PWMinit>
	driver_init();	
 152:	0e 94 8c 00 	call	0x118	; 0x118 <driver_init>
	UART_init(9600);
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_init>
 162:	08 95       	ret

00000164 <main>:


#include "puttingTogether1.h"

int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	29 97       	sbiw	r28, 0x09	; 9
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	init();
 178:	0e 94 a5 00 	call	0x14a	; 0x14a <init>
	SET_BIT(DDRA,PA5);  //sets PA4 as output
 17c:	d5 9a       	sbi	0x1a, 5	; 26
	
	//
	CLEAR_BIT(DDRD, PD6); 
 17e:	8e 98       	cbi	0x11, 6	; 17
	CLEAR_BIT(DDRD, PD5); //PD5 INPUT
 180:	8d 98       	cbi	0x11, 5	; 17
	CLEAR_BIT(DDRD, PD4);
 182:	8c 98       	cbi	0x11, 4	; 17
	
	volatile uint8 currState=FORWARD;
 184:	86 e4       	ldi	r24, 0x46	; 70
 186:	89 83       	std	Y+1, r24	; 0x01
	volatile float32 speedNow=30,degreeNow=0.1;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	a0 ef       	ldi	r26, 0xF0	; 240
 18e:	b1 e4       	ldi	r27, 0x41	; 65
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	9b 83       	std	Y+3, r25	; 0x03
 194:	ac 83       	std	Y+4, r26	; 0x04
 196:	bd 83       	std	Y+5, r27	; 0x05
 198:	8d ec       	ldi	r24, 0xCD	; 205
 19a:	9c ec       	ldi	r25, 0xCC	; 204
 19c:	ac ec       	ldi	r26, 0xCC	; 204
 19e:	bd e3       	ldi	r27, 0x3D	; 61
 1a0:	8e 83       	std	Y+6, r24	; 0x06
 1a2:	9f 83       	std	Y+7, r25	; 0x07
 1a4:	a8 87       	std	Y+8, r26	; 0x08
 1a6:	b9 87       	std	Y+9, r27	; 0x09
		//PD6 = left
		
		//REAL line follower mode code starts here
		if(((IS_BIT_CLEAR(PIND, right))&&( IS_BIT_CLEAR(PIND, left))&&(IS_BIT_CLEAR(PIND, mid)))/*||((IS_BIT_SET(PIND, right))&&(IS_BIT_SET(PIND, left))&&(IS_BIT_SET(PIND, mid)))*/||((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_SET(PIND, right))&&(IS_BIT_SET(PIND, left))))
		{
			currState= FORWARD;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f6 e4       	ldi	r31, 0x46	; 70
 1ac:	ff 2e       	mov	r15, r31
 1ae:	f0 2d       	mov	r31, r0
			Forward(speedNow);
		}
		if(((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_CLEAR(PIND, left))&&(IS_BIT_SET(PIND, right))) || ((IS_BIT_SET(PIND, mid))&&(IS_BIT_CLEAR(PIND, left))&&(IS_BIT_SET(PIND, right))))
		{
			currState= FORWARDLEFT;
 1b0:	07 e4       	ldi	r16, 0x47	; 71
			ForwardLeftLF(speedNow,degreeNow);
		}
		if(((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_CLEAR(PIND, right))&&(IS_BIT_SET(PIND, left))) || ((IS_BIT_SET(PIND, mid))&&(IS_BIT_CLEAR(PIND, right))&&(IS_BIT_SET(PIND, left))))	
		{
			currState= FORWARDRIGHT;
 1b2:	19 e4       	ldi	r17, 0x49	; 73
		//PD4 = right
		//PD5 = mid
		//PD6 = left
		
		//REAL line follower mode code starts here
		if(((IS_BIT_CLEAR(PIND, right))&&( IS_BIT_CLEAR(PIND, left))&&(IS_BIT_CLEAR(PIND, mid)))/*||((IS_BIT_SET(PIND, right))&&(IS_BIT_SET(PIND, left))&&(IS_BIT_SET(PIND, mid)))*/||((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_SET(PIND, right))&&(IS_BIT_SET(PIND, left))))
 1b4:	84 99       	sbic	0x10, 4	; 16
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <main+0x5c>
 1b8:	86 99       	sbic	0x10, 6	; 16
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x5c>
 1bc:	85 9b       	sbis	0x10, 5	; 16
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <main+0x68>
 1c0:	85 99       	sbic	0x10, 5	; 16
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <main+0x76>
 1c4:	84 9b       	sbis	0x10, 4	; 16
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <main+0x76>
 1c8:	86 9b       	sbis	0x10, 6	; 16
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <main+0x76>
		{
			currState= FORWARD;
 1cc:	f9 82       	std	Y+1, r15	; 0x01
			Forward(speedNow);
 1ce:	6a 81       	ldd	r22, Y+2	; 0x02
 1d0:	7b 81       	ldd	r23, Y+3	; 0x03
 1d2:	8c 81       	ldd	r24, Y+4	; 0x04
 1d4:	9d 81       	ldd	r25, Y+5	; 0x05
 1d6:	0e 94 4d 01 	call	0x29a	; 0x29a <Forward>
		}
		if(((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_CLEAR(PIND, left))&&(IS_BIT_SET(PIND, right))) || ((IS_BIT_SET(PIND, mid))&&(IS_BIT_CLEAR(PIND, left))&&(IS_BIT_SET(PIND, right))))
 1da:	85 99       	sbic	0x10, 5	; 16
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <main+0x82>
 1de:	86 99       	sbic	0x10, 6	; 16
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0x82>
 1e2:	84 99       	sbic	0x10, 4	; 16
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <main+0x8e>
 1e6:	85 9b       	sbis	0x10, 5	; 16
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <main+0xa4>
 1ea:	86 99       	sbic	0x10, 6	; 16
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <main+0xa4>
 1ee:	84 9b       	sbis	0x10, 4	; 16
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <main+0xa4>
		{
			currState= FORWARDLEFT;
 1f2:	09 83       	std	Y+1, r16	; 0x01
			ForwardLeftLF(speedNow,degreeNow);
 1f4:	2e 81       	ldd	r18, Y+6	; 0x06
 1f6:	3f 81       	ldd	r19, Y+7	; 0x07
 1f8:	48 85       	ldd	r20, Y+8	; 0x08
 1fa:	59 85       	ldd	r21, Y+9	; 0x09
 1fc:	6a 81       	ldd	r22, Y+2	; 0x02
 1fe:	7b 81       	ldd	r23, Y+3	; 0x03
 200:	8c 81       	ldd	r24, Y+4	; 0x04
 202:	9d 81       	ldd	r25, Y+5	; 0x05
 204:	0e 94 61 00 	call	0xc2	; 0xc2 <ForwardLeftLF>
		}
		if(((IS_BIT_CLEAR(PIND, mid))&&(IS_BIT_CLEAR(PIND, right))&&(IS_BIT_SET(PIND, left))) || ((IS_BIT_SET(PIND, mid))&&(IS_BIT_CLEAR(PIND, right))&&(IS_BIT_SET(PIND, left))))	
 208:	85 99       	sbic	0x10, 5	; 16
 20a:	04 c0       	rjmp	.+8      	; 0x214 <main+0xb0>
 20c:	84 99       	sbic	0x10, 4	; 16
 20e:	02 c0       	rjmp	.+4      	; 0x214 <main+0xb0>
 210:	86 99       	sbic	0x10, 6	; 16
 212:	06 c0       	rjmp	.+12     	; 0x220 <main+0xbc>
 214:	85 9b       	sbis	0x10, 5	; 16
 216:	0f c0       	rjmp	.+30     	; 0x236 <main+0xd2>
 218:	84 99       	sbic	0x10, 4	; 16
 21a:	0d c0       	rjmp	.+26     	; 0x236 <main+0xd2>
 21c:	86 9b       	sbis	0x10, 6	; 16
 21e:	0b c0       	rjmp	.+22     	; 0x236 <main+0xd2>
		{
			currState= FORWARDRIGHT;
 220:	19 83       	std	Y+1, r17	; 0x01
			ForwardRightLF(speedNow,degreeNow);
 222:	2e 81       	ldd	r18, Y+6	; 0x06
 224:	3f 81       	ldd	r19, Y+7	; 0x07
 226:	48 85       	ldd	r20, Y+8	; 0x08
 228:	59 85       	ldd	r21, Y+9	; 0x09
 22a:	6a 81       	ldd	r22, Y+2	; 0x02
 22c:	7b 81       	ldd	r23, Y+3	; 0x03
 22e:	8c 81       	ldd	r24, Y+4	; 0x04
 230:	9d 81       	ldd	r25, Y+5	; 0x05
 232:	0e 94 36 00 	call	0x6c	; 0x6c <ForwardRightLF>
		}
		if(IS_BIT_SET(PIND, mid) && IS_BIT_CLEAR(PIND, right) && IS_BIT_CLEAR(PIND, left))
 236:	85 9b       	sbis	0x10, 5	; 16
 238:	05 c0       	rjmp	.+10     	; 0x244 <main+0xe0>
 23a:	84 99       	sbic	0x10, 4	; 16
 23c:	03 c0       	rjmp	.+6      	; 0x244 <main+0xe0>
 23e:	86 9b       	sbis	0x10, 6	; 16
		{
			Break();
 240:	0e 94 5f 01 	call	0x2be	; 0x2be <Break>
		}
		if((IS_BIT_SET(PIND, right))&&(IS_BIT_SET(PIND, left))&&(IS_BIT_SET(PIND, mid)))
 244:	84 9b       	sbis	0x10, 4	; 16
 246:	b6 cf       	rjmp	.-148    	; 0x1b4 <main+0x50>
 248:	86 9b       	sbis	0x10, 6	; 16
 24a:	b4 cf       	rjmp	.-152    	; 0x1b4 <main+0x50>
 24c:	85 9b       	sbis	0x10, 5	; 16
 24e:	b2 cf       	rjmp	.-156    	; 0x1b4 <main+0x50>
		{
			if(currState==FORWARD)
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	86 34       	cpi	r24, 0x46	; 70
 254:	31 f4       	brne	.+12     	; 0x262 <main+0xfe>
			{
				Forward(speedNow);
 256:	6a 81       	ldd	r22, Y+2	; 0x02
 258:	7b 81       	ldd	r23, Y+3	; 0x03
 25a:	8c 81       	ldd	r24, Y+4	; 0x04
 25c:	9d 81       	ldd	r25, Y+5	; 0x05
 25e:	0e 94 4d 01 	call	0x29a	; 0x29a <Forward>
			}
			if(currState==FORWARDLEFT)
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	87 34       	cpi	r24, 0x47	; 71
 266:	51 f4       	brne	.+20     	; 0x27c <main+0x118>
			{
				ForwardLeftLF(speedNow,degreeNow);
 268:	2e 81       	ldd	r18, Y+6	; 0x06
 26a:	3f 81       	ldd	r19, Y+7	; 0x07
 26c:	48 85       	ldd	r20, Y+8	; 0x08
 26e:	59 85       	ldd	r21, Y+9	; 0x09
 270:	6a 81       	ldd	r22, Y+2	; 0x02
 272:	7b 81       	ldd	r23, Y+3	; 0x03
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	9d 81       	ldd	r25, Y+5	; 0x05
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <ForwardLeftLF>
			}
			if(currState==FORWARDRIGHT)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	89 34       	cpi	r24, 0x49	; 73
 280:	09 f0       	breq	.+2      	; 0x284 <main+0x120>
 282:	98 cf       	rjmp	.-208    	; 0x1b4 <main+0x50>
			{
				ForwardRightLF(speedNow,degreeNow);
 284:	2e 81       	ldd	r18, Y+6	; 0x06
 286:	3f 81       	ldd	r19, Y+7	; 0x07
 288:	48 85       	ldd	r20, Y+8	; 0x08
 28a:	59 85       	ldd	r21, Y+9	; 0x09
 28c:	6a 81       	ldd	r22, Y+2	; 0x02
 28e:	7b 81       	ldd	r23, Y+3	; 0x03
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	9d 81       	ldd	r25, Y+5	; 0x05
 294:	0e 94 36 00 	call	0x6c	; 0x6c <ForwardRightLF>
 298:	8d cf       	rjmp	.-230    	; 0x1b4 <main+0x50>

0000029a <Forward>:
 */ 

#include "SteeringMech.h"

void Forward(float32 speed)
{
 29a:	cf 93       	push	r28
	set_speed_ML(speed);
 29c:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 2a0:	c6 2f       	mov	r28, r22
 2a2:	86 2f       	mov	r24, r22
 2a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_speed_ML>
	set_speed_MR(speed);
 2a8:	8c 2f       	mov	r24, r28
 2aa:	0e 94 b4 01 	call	0x368	; 0x368 <set_speed_MR>
	set_direction_ML(CW);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 91 00 	call	0x122	; 0x122 <set_direction_ML>
	set_direction_MR(CW);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 9b 00 	call	0x136	; 0x136 <set_direction_MR>
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Break>:
	set_direction_ML(direction);
	set_direction_MR(direction);
}
void Break()
{
	set_speed_ML(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_speed_ML>
	set_speed_MR(0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 b4 01 	call	0x368	; 0x368 <set_speed_MR>
 2ca:	08 95       	ret

000002cc <Timer0_PC_PWMinit>:
 */ 

#include "Timer0.h"
void Timer0_PC_PWMinit(void)
{
	TCNT0=0;	//count = 0 initially
 2cc:	12 be       	out	0x32, r1	; 50
	OCR0=0;		//compare match value = 0 initially
 2ce:	1c be       	out	0x3c, r1	; 60
	/*TCCR0 |= (1<<WGM00) | (1<<COM01) | (1<<CS00);*/
	/*PC PWM Settings*/
	SET_BIT(TCCR0,WGM00);
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM01);
 2d6:	83 b7       	in	r24, 0x33	; 51
 2d8:	87 7f       	andi	r24, 0xF7	; 247
 2da:	83 bf       	out	0x33, r24	; 51
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR0,COM01);
 2dc:	83 b7       	in	r24, 0x33	; 51
 2de:	80 62       	ori	r24, 0x20	; 32
 2e0:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
 2e2:	83 b7       	in	r24, 0x33	; 51
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	83 bf       	out	0x33, r24	; 51
	/*Select prescalar=8*/
	SET_BIT(TCCR0,CS01);
 2e8:	83 b7       	in	r24, 0x33	; 51
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS00);
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	8e 7f       	andi	r24, 0xFE	; 254
 2f2:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	83 bf       	out	0x33, r24	; 51
	/*Setting pin OC0 to be output*/
	SET_BIT(DDRB,PB3);
 2fa:	bb 9a       	sbi	0x17, 3	; 23
 2fc:	08 95       	ret

000002fe <set_speed_ML>:
}
void set_speed_ML(uint8 duty_cycle) //set_dutyCycle_Timer0 // takes decimal
{
	OCR0 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 2fe:	68 2f       	mov	r22, r24
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__floatsisf>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	48 ec       	ldi	r20, 0xC8	; 200
 310:	52 e4       	ldi	r21, 0x42	; 66
 312:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	4f e7       	ldi	r20, 0x7F	; 127
 31c:	53 e4       	ldi	r21, 0x43	; 67
 31e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	5f e3       	ldi	r21, 0x3F	; 63
 32a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__addsf3>
 32e:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 332:	6c bf       	out	0x3c, r22	; 60
 334:	08 95       	ret

00000336 <Timer2_PC_PWMinit>:
 */ 

#include "Timer2.h"
void Timer2_PC_PWMinit(void)
{
	TCNT2=0;	//count = 0 initially
 336:	14 bc       	out	0x24, r1	; 36
	OCR2=0;		//compare match value = 0 initially
 338:	13 bc       	out	0x23, r1	; 35
	/*PC PWM Settings*/
	SET_BIT(TCCR2,WGM20);
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,WGM21);
 340:	85 b5       	in	r24, 0x25	; 37
 342:	87 7f       	andi	r24, 0xF7	; 247
 344:	85 bd       	out	0x25, r24	; 37
	/* PC PWM Non-inverting Mode*/
	SET_BIT(TCCR2,COM21);
 346:	85 b5       	in	r24, 0x25	; 37
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,COM20);
 34c:	85 b5       	in	r24, 0x25	; 37
 34e:	8f 7e       	andi	r24, 0xEF	; 239
 350:	85 bd       	out	0x25, r24	; 37
	/*Set prescalar to 8*/
	SET_BIT(TCCR2,CS21);
 352:	85 b5       	in	r24, 0x25	; 37
 354:	82 60       	ori	r24, 0x02	; 2
 356:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS22);
 358:	85 b5       	in	r24, 0x25	; 37
 35a:	8b 7f       	andi	r24, 0xFB	; 251
 35c:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS20);
 35e:	85 b5       	in	r24, 0x25	; 37
 360:	8e 7f       	andi	r24, 0xFE	; 254
 362:	85 bd       	out	0x25, r24	; 37
	/*Setting pin OC2 to be output*/
	SET_BIT(DDRD, PD7);
 364:	8f 9a       	sbi	0x11, 7	; 17
 366:	08 95       	ret

00000368 <set_speed_MR>:
}
void set_speed_MR(uint8 duty_cycle) //set_dutyCycle_Timer2 // takes decimal
{
	OCR2 = (uint8)  ((duty_cycle/100.0) *255.0 + 0.5);
 368:	68 2f       	mov	r22, r24
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__floatsisf>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	48 ec       	ldi	r20, 0xC8	; 200
 37a:	52 e4       	ldi	r21, 0x42	; 66
 37c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	4f e7       	ldi	r20, 0x7F	; 127
 386:	53 e4       	ldi	r21, 0x43	; 67
 388:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	5f e3       	ldi	r21, 0x3F	; 63
 394:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__addsf3>
 398:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 39c:	63 bd       	out	0x23, r22	; 35
 39e:	08 95       	ret

000003a0 <UART_init>:
 3a0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__floatunsisf>
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	51 e4       	ldi	r21, 0x41	; 65
 3ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
 3b0:	9b 01       	movw	r18, r22
 3b2:	ac 01       	movw	r20, r24
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	74 e2       	ldi	r23, 0x24	; 36
 3b8:	84 e7       	ldi	r24, 0x74	; 116
 3ba:	99 e4       	ldi	r25, 0x49	; 73
 3bc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	40 e8       	ldi	r20, 0x80	; 128
 3c6:	5f e3       	ldi	r21, 0x3F	; 63
 3c8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__subsf3>
 3cc:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 3d0:	59 9a       	sbi	0x0b, 1	; 11
 3d2:	8a b1       	in	r24, 0x0a	; 10
 3d4:	88 61       	ori	r24, 0x18	; 24
 3d6:	8a b9       	out	0x0a, r24	; 10
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	86 68       	ori	r24, 0x86	; 134
 3dc:	80 bd       	out	0x20, r24	; 32
 3de:	52 98       	cbi	0x0a, 2	; 10
 3e0:	69 b9       	out	0x09, r22	; 9
 3e2:	70 bd       	out	0x20, r23	; 32
 3e4:	08 95       	ret

000003e6 <__subsf3>:
 3e6:	50 58       	subi	r21, 0x80	; 128

000003e8 <__addsf3>:
 3e8:	bb 27       	eor	r27, r27
 3ea:	aa 27       	eor	r26, r26
 3ec:	0e d0       	rcall	.+28     	; 0x40a <__addsf3x>
 3ee:	48 c1       	rjmp	.+656    	; 0x680 <__fp_round>
 3f0:	39 d1       	rcall	.+626    	; 0x664 <__fp_pscA>
 3f2:	30 f0       	brcs	.+12     	; 0x400 <__addsf3+0x18>
 3f4:	3e d1       	rcall	.+636    	; 0x672 <__fp_pscB>
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__addsf3+0x18>
 3f8:	31 f4       	brne	.+12     	; 0x406 <__addsf3+0x1e>
 3fa:	9f 3f       	cpi	r25, 0xFF	; 255
 3fc:	11 f4       	brne	.+4      	; 0x402 <__addsf3+0x1a>
 3fe:	1e f4       	brtc	.+6      	; 0x406 <__addsf3+0x1e>
 400:	2e c1       	rjmp	.+604    	; 0x65e <__fp_nan>
 402:	0e f4       	brtc	.+2      	; 0x406 <__addsf3+0x1e>
 404:	e0 95       	com	r30
 406:	e7 fb       	bst	r30, 7
 408:	24 c1       	rjmp	.+584    	; 0x652 <__fp_inf>

0000040a <__addsf3x>:
 40a:	e9 2f       	mov	r30, r25
 40c:	4a d1       	rcall	.+660    	; 0x6a2 <__fp_split3>
 40e:	80 f3       	brcs	.-32     	; 0x3f0 <__addsf3+0x8>
 410:	ba 17       	cp	r27, r26
 412:	62 07       	cpc	r22, r18
 414:	73 07       	cpc	r23, r19
 416:	84 07       	cpc	r24, r20
 418:	95 07       	cpc	r25, r21
 41a:	18 f0       	brcs	.+6      	; 0x422 <__addsf3x+0x18>
 41c:	71 f4       	brne	.+28     	; 0x43a <__addsf3x+0x30>
 41e:	9e f5       	brtc	.+102    	; 0x486 <__addsf3x+0x7c>
 420:	62 c1       	rjmp	.+708    	; 0x6e6 <__fp_zero>
 422:	0e f4       	brtc	.+2      	; 0x426 <__addsf3x+0x1c>
 424:	e0 95       	com	r30
 426:	0b 2e       	mov	r0, r27
 428:	ba 2f       	mov	r27, r26
 42a:	a0 2d       	mov	r26, r0
 42c:	0b 01       	movw	r0, r22
 42e:	b9 01       	movw	r22, r18
 430:	90 01       	movw	r18, r0
 432:	0c 01       	movw	r0, r24
 434:	ca 01       	movw	r24, r20
 436:	a0 01       	movw	r20, r0
 438:	11 24       	eor	r1, r1
 43a:	ff 27       	eor	r31, r31
 43c:	59 1b       	sub	r21, r25
 43e:	99 f0       	breq	.+38     	; 0x466 <__addsf3x+0x5c>
 440:	59 3f       	cpi	r21, 0xF9	; 249
 442:	50 f4       	brcc	.+20     	; 0x458 <__addsf3x+0x4e>
 444:	50 3e       	cpi	r21, 0xE0	; 224
 446:	68 f1       	brcs	.+90     	; 0x4a2 <__addsf3x+0x98>
 448:	1a 16       	cp	r1, r26
 44a:	f0 40       	sbci	r31, 0x00	; 0
 44c:	a2 2f       	mov	r26, r18
 44e:	23 2f       	mov	r18, r19
 450:	34 2f       	mov	r19, r20
 452:	44 27       	eor	r20, r20
 454:	58 5f       	subi	r21, 0xF8	; 248
 456:	f3 cf       	rjmp	.-26     	; 0x43e <__addsf3x+0x34>
 458:	46 95       	lsr	r20
 45a:	37 95       	ror	r19
 45c:	27 95       	ror	r18
 45e:	a7 95       	ror	r26
 460:	f0 40       	sbci	r31, 0x00	; 0
 462:	53 95       	inc	r21
 464:	c9 f7       	brne	.-14     	; 0x458 <__addsf3x+0x4e>
 466:	7e f4       	brtc	.+30     	; 0x486 <__addsf3x+0x7c>
 468:	1f 16       	cp	r1, r31
 46a:	ba 0b       	sbc	r27, r26
 46c:	62 0b       	sbc	r22, r18
 46e:	73 0b       	sbc	r23, r19
 470:	84 0b       	sbc	r24, r20
 472:	ba f0       	brmi	.+46     	; 0x4a2 <__addsf3x+0x98>
 474:	91 50       	subi	r25, 0x01	; 1
 476:	a1 f0       	breq	.+40     	; 0x4a0 <__addsf3x+0x96>
 478:	ff 0f       	add	r31, r31
 47a:	bb 1f       	adc	r27, r27
 47c:	66 1f       	adc	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	c2 f7       	brpl	.-16     	; 0x474 <__addsf3x+0x6a>
 484:	0e c0       	rjmp	.+28     	; 0x4a2 <__addsf3x+0x98>
 486:	ba 0f       	add	r27, r26
 488:	62 1f       	adc	r22, r18
 48a:	73 1f       	adc	r23, r19
 48c:	84 1f       	adc	r24, r20
 48e:	48 f4       	brcc	.+18     	; 0x4a2 <__addsf3x+0x98>
 490:	87 95       	ror	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b7 95       	ror	r27
 498:	f7 95       	ror	r31
 49a:	9e 3f       	cpi	r25, 0xFE	; 254
 49c:	08 f0       	brcs	.+2      	; 0x4a0 <__addsf3x+0x96>
 49e:	b3 cf       	rjmp	.-154    	; 0x406 <__addsf3+0x1e>
 4a0:	93 95       	inc	r25
 4a2:	88 0f       	add	r24, r24
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__addsf3x+0x9e>
 4a6:	99 27       	eor	r25, r25
 4a8:	ee 0f       	add	r30, r30
 4aa:	97 95       	ror	r25
 4ac:	87 95       	ror	r24
 4ae:	08 95       	ret

000004b0 <__divsf3>:
 4b0:	0c d0       	rcall	.+24     	; 0x4ca <__divsf3x>
 4b2:	e6 c0       	rjmp	.+460    	; 0x680 <__fp_round>
 4b4:	de d0       	rcall	.+444    	; 0x672 <__fp_pscB>
 4b6:	40 f0       	brcs	.+16     	; 0x4c8 <__divsf3+0x18>
 4b8:	d5 d0       	rcall	.+426    	; 0x664 <__fp_pscA>
 4ba:	30 f0       	brcs	.+12     	; 0x4c8 <__divsf3+0x18>
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <__divsf3+0x16>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <__divsf3+0x18>
 4c2:	c7 c0       	rjmp	.+398    	; 0x652 <__fp_inf>
 4c4:	51 11       	cpse	r21, r1
 4c6:	10 c1       	rjmp	.+544    	; 0x6e8 <__fp_szero>
 4c8:	ca c0       	rjmp	.+404    	; 0x65e <__fp_nan>

000004ca <__divsf3x>:
 4ca:	eb d0       	rcall	.+470    	; 0x6a2 <__fp_split3>
 4cc:	98 f3       	brcs	.-26     	; 0x4b4 <__divsf3+0x4>

000004ce <__divsf3_pse>:
 4ce:	99 23       	and	r25, r25
 4d0:	c9 f3       	breq	.-14     	; 0x4c4 <__divsf3+0x14>
 4d2:	55 23       	and	r21, r21
 4d4:	b1 f3       	breq	.-20     	; 0x4c2 <__divsf3+0x12>
 4d6:	95 1b       	sub	r25, r21
 4d8:	55 0b       	sbc	r21, r21
 4da:	bb 27       	eor	r27, r27
 4dc:	aa 27       	eor	r26, r26
 4de:	62 17       	cp	r22, r18
 4e0:	73 07       	cpc	r23, r19
 4e2:	84 07       	cpc	r24, r20
 4e4:	38 f0       	brcs	.+14     	; 0x4f4 <__divsf3_pse+0x26>
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	44 1f       	adc	r20, r20
 4f0:	aa 1f       	adc	r26, r26
 4f2:	a9 f3       	breq	.-22     	; 0x4de <__divsf3_pse+0x10>
 4f4:	33 d0       	rcall	.+102    	; 0x55c <__divsf3_pse+0x8e>
 4f6:	0e 2e       	mov	r0, r30
 4f8:	3a f0       	brmi	.+14     	; 0x508 <__divsf3_pse+0x3a>
 4fa:	e0 e8       	ldi	r30, 0x80	; 128
 4fc:	30 d0       	rcall	.+96     	; 0x55e <__divsf3_pse+0x90>
 4fe:	91 50       	subi	r25, 0x01	; 1
 500:	50 40       	sbci	r21, 0x00	; 0
 502:	e6 95       	lsr	r30
 504:	00 1c       	adc	r0, r0
 506:	ca f7       	brpl	.-14     	; 0x4fa <__divsf3_pse+0x2c>
 508:	29 d0       	rcall	.+82     	; 0x55c <__divsf3_pse+0x8e>
 50a:	fe 2f       	mov	r31, r30
 50c:	27 d0       	rcall	.+78     	; 0x55c <__divsf3_pse+0x8e>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	bb 1f       	adc	r27, r27
 516:	26 17       	cp	r18, r22
 518:	37 07       	cpc	r19, r23
 51a:	48 07       	cpc	r20, r24
 51c:	ab 07       	cpc	r26, r27
 51e:	b0 e8       	ldi	r27, 0x80	; 128
 520:	09 f0       	breq	.+2      	; 0x524 <__divsf3_pse+0x56>
 522:	bb 0b       	sbc	r27, r27
 524:	80 2d       	mov	r24, r0
 526:	bf 01       	movw	r22, r30
 528:	ff 27       	eor	r31, r31
 52a:	93 58       	subi	r25, 0x83	; 131
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	2a f0       	brmi	.+10     	; 0x53a <__divsf3_pse+0x6c>
 530:	9e 3f       	cpi	r25, 0xFE	; 254
 532:	51 05       	cpc	r21, r1
 534:	68 f0       	brcs	.+26     	; 0x550 <__divsf3_pse+0x82>
 536:	8d c0       	rjmp	.+282    	; 0x652 <__fp_inf>
 538:	d7 c0       	rjmp	.+430    	; 0x6e8 <__fp_szero>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	ec f3       	brlt	.-6      	; 0x538 <__divsf3_pse+0x6a>
 53e:	98 3e       	cpi	r25, 0xE8	; 232
 540:	dc f3       	brlt	.-10     	; 0x538 <__divsf3_pse+0x6a>
 542:	86 95       	lsr	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f7 95       	ror	r31
 54c:	9f 5f       	subi	r25, 0xFF	; 255
 54e:	c9 f7       	brne	.-14     	; 0x542 <__divsf3_pse+0x74>
 550:	88 0f       	add	r24, r24
 552:	91 1d       	adc	r25, r1
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret
 55c:	e1 e0       	ldi	r30, 0x01	; 1
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	bb 1f       	adc	r27, r27
 566:	62 17       	cp	r22, r18
 568:	73 07       	cpc	r23, r19
 56a:	84 07       	cpc	r24, r20
 56c:	ba 07       	cpc	r27, r26
 56e:	20 f0       	brcs	.+8      	; 0x578 <__divsf3_pse+0xaa>
 570:	62 1b       	sub	r22, r18
 572:	73 0b       	sbc	r23, r19
 574:	84 0b       	sbc	r24, r20
 576:	ba 0b       	sbc	r27, r26
 578:	ee 1f       	adc	r30, r30
 57a:	88 f7       	brcc	.-30     	; 0x55e <__divsf3_pse+0x90>
 57c:	e0 95       	com	r30
 57e:	08 95       	ret

00000580 <__fixunssfsi>:
 580:	98 d0       	rcall	.+304    	; 0x6b2 <__fp_splitA>
 582:	88 f0       	brcs	.+34     	; 0x5a6 <__fixunssfsi+0x26>
 584:	9f 57       	subi	r25, 0x7F	; 127
 586:	90 f0       	brcs	.+36     	; 0x5ac <__fixunssfsi+0x2c>
 588:	b9 2f       	mov	r27, r25
 58a:	99 27       	eor	r25, r25
 58c:	b7 51       	subi	r27, 0x17	; 23
 58e:	a0 f0       	brcs	.+40     	; 0x5b8 <__fixunssfsi+0x38>
 590:	d1 f0       	breq	.+52     	; 0x5c6 <__fixunssfsi+0x46>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a f0       	brmi	.+6      	; 0x5a2 <__fixunssfsi+0x22>
 59c:	ba 95       	dec	r27
 59e:	c9 f7       	brne	.-14     	; 0x592 <__fixunssfsi+0x12>
 5a0:	12 c0       	rjmp	.+36     	; 0x5c6 <__fixunssfsi+0x46>
 5a2:	b1 30       	cpi	r27, 0x01	; 1
 5a4:	81 f0       	breq	.+32     	; 0x5c6 <__fixunssfsi+0x46>
 5a6:	9f d0       	rcall	.+318    	; 0x6e6 <__fp_zero>
 5a8:	b1 e0       	ldi	r27, 0x01	; 1
 5aa:	08 95       	ret
 5ac:	9c c0       	rjmp	.+312    	; 0x6e6 <__fp_zero>
 5ae:	67 2f       	mov	r22, r23
 5b0:	78 2f       	mov	r23, r24
 5b2:	88 27       	eor	r24, r24
 5b4:	b8 5f       	subi	r27, 0xF8	; 248
 5b6:	39 f0       	breq	.+14     	; 0x5c6 <__fixunssfsi+0x46>
 5b8:	b9 3f       	cpi	r27, 0xF9	; 249
 5ba:	cc f3       	brlt	.-14     	; 0x5ae <__fixunssfsi+0x2e>
 5bc:	86 95       	lsr	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b3 95       	inc	r27
 5c4:	d9 f7       	brne	.-10     	; 0x5bc <__fixunssfsi+0x3c>
 5c6:	3e f4       	brtc	.+14     	; 0x5d6 <__fixunssfsi+0x56>
 5c8:	90 95       	com	r25
 5ca:	80 95       	com	r24
 5cc:	70 95       	com	r23
 5ce:	61 95       	neg	r22
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__floatunsisf>:
 5d8:	e8 94       	clt
 5da:	09 c0       	rjmp	.+18     	; 0x5ee <__floatsisf+0x12>

000005dc <__floatsisf>:
 5dc:	97 fb       	bst	r25, 7
 5de:	3e f4       	brtc	.+14     	; 0x5ee <__floatsisf+0x12>
 5e0:	90 95       	com	r25
 5e2:	80 95       	com	r24
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	99 23       	and	r25, r25
 5f0:	a9 f0       	breq	.+42     	; 0x61c <__floatsisf+0x40>
 5f2:	f9 2f       	mov	r31, r25
 5f4:	96 e9       	ldi	r25, 0x96	; 150
 5f6:	bb 27       	eor	r27, r27
 5f8:	93 95       	inc	r25
 5fa:	f6 95       	lsr	r31
 5fc:	87 95       	ror	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f1 11       	cpse	r31, r1
 606:	f8 cf       	rjmp	.-16     	; 0x5f8 <__floatsisf+0x1c>
 608:	fa f4       	brpl	.+62     	; 0x648 <__floatsisf+0x6c>
 60a:	bb 0f       	add	r27, r27
 60c:	11 f4       	brne	.+4      	; 0x612 <__floatsisf+0x36>
 60e:	60 ff       	sbrs	r22, 0
 610:	1b c0       	rjmp	.+54     	; 0x648 <__floatsisf+0x6c>
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	16 c0       	rjmp	.+44     	; 0x648 <__floatsisf+0x6c>
 61c:	88 23       	and	r24, r24
 61e:	11 f0       	breq	.+4      	; 0x624 <__floatsisf+0x48>
 620:	96 e9       	ldi	r25, 0x96	; 150
 622:	11 c0       	rjmp	.+34     	; 0x646 <__floatsisf+0x6a>
 624:	77 23       	and	r23, r23
 626:	21 f0       	breq	.+8      	; 0x630 <__floatsisf+0x54>
 628:	9e e8       	ldi	r25, 0x8E	; 142
 62a:	87 2f       	mov	r24, r23
 62c:	76 2f       	mov	r23, r22
 62e:	05 c0       	rjmp	.+10     	; 0x63a <__floatsisf+0x5e>
 630:	66 23       	and	r22, r22
 632:	71 f0       	breq	.+28     	; 0x650 <__floatsisf+0x74>
 634:	96 e8       	ldi	r25, 0x86	; 134
 636:	86 2f       	mov	r24, r22
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	2a f0       	brmi	.+10     	; 0x648 <__floatsisf+0x6c>
 63e:	9a 95       	dec	r25
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	da f7       	brpl	.-10     	; 0x63e <__floatsisf+0x62>
 648:	88 0f       	add	r24, r24
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
 64e:	97 f9       	bld	r25, 7
 650:	08 95       	ret

00000652 <__fp_inf>:
 652:	97 f9       	bld	r25, 7
 654:	9f 67       	ori	r25, 0x7F	; 127
 656:	80 e8       	ldi	r24, 0x80	; 128
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	08 95       	ret

0000065e <__fp_nan>:
 65e:	9f ef       	ldi	r25, 0xFF	; 255
 660:	80 ec       	ldi	r24, 0xC0	; 192
 662:	08 95       	ret

00000664 <__fp_pscA>:
 664:	00 24       	eor	r0, r0
 666:	0a 94       	dec	r0
 668:	16 16       	cp	r1, r22
 66a:	17 06       	cpc	r1, r23
 66c:	18 06       	cpc	r1, r24
 66e:	09 06       	cpc	r0, r25
 670:	08 95       	ret

00000672 <__fp_pscB>:
 672:	00 24       	eor	r0, r0
 674:	0a 94       	dec	r0
 676:	12 16       	cp	r1, r18
 678:	13 06       	cpc	r1, r19
 67a:	14 06       	cpc	r1, r20
 67c:	05 06       	cpc	r0, r21
 67e:	08 95       	ret

00000680 <__fp_round>:
 680:	09 2e       	mov	r0, r25
 682:	03 94       	inc	r0
 684:	00 0c       	add	r0, r0
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0xc>
 688:	88 23       	and	r24, r24
 68a:	52 f0       	brmi	.+20     	; 0x6a0 <__fp_round+0x20>
 68c:	bb 0f       	add	r27, r27
 68e:	40 f4       	brcc	.+16     	; 0x6a0 <__fp_round+0x20>
 690:	bf 2b       	or	r27, r31
 692:	11 f4       	brne	.+4      	; 0x698 <__fp_round+0x18>
 694:	60 ff       	sbrs	r22, 0
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <__fp_round+0x20>
 698:	6f 5f       	subi	r22, 0xFF	; 255
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	08 95       	ret

000006a2 <__fp_split3>:
 6a2:	57 fd       	sbrc	r21, 7
 6a4:	90 58       	subi	r25, 0x80	; 128
 6a6:	44 0f       	add	r20, r20
 6a8:	55 1f       	adc	r21, r21
 6aa:	59 f0       	breq	.+22     	; 0x6c2 <__fp_splitA+0x10>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	71 f0       	breq	.+28     	; 0x6cc <__fp_splitA+0x1a>
 6b0:	47 95       	ror	r20

000006b2 <__fp_splitA>:
 6b2:	88 0f       	add	r24, r24
 6b4:	97 fb       	bst	r25, 7
 6b6:	99 1f       	adc	r25, r25
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <__fp_splitA+0x20>
 6ba:	9f 3f       	cpi	r25, 0xFF	; 255
 6bc:	79 f0       	breq	.+30     	; 0x6dc <__fp_splitA+0x2a>
 6be:	87 95       	ror	r24
 6c0:	08 95       	ret
 6c2:	12 16       	cp	r1, r18
 6c4:	13 06       	cpc	r1, r19
 6c6:	14 06       	cpc	r1, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	f2 cf       	rjmp	.-28     	; 0x6b0 <__fp_split3+0xe>
 6cc:	46 95       	lsr	r20
 6ce:	f1 df       	rcall	.-30     	; 0x6b2 <__fp_splitA>
 6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <__fp_splitA+0x30>
 6d2:	16 16       	cp	r1, r22
 6d4:	17 06       	cpc	r1, r23
 6d6:	18 06       	cpc	r1, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	f1 cf       	rjmp	.-30     	; 0x6be <__fp_splitA+0xc>
 6dc:	86 95       	lsr	r24
 6de:	71 05       	cpc	r23, r1
 6e0:	61 05       	cpc	r22, r1
 6e2:	08 94       	sec
 6e4:	08 95       	ret

000006e6 <__fp_zero>:
 6e6:	e8 94       	clt

000006e8 <__fp_szero>:
 6e8:	bb 27       	eor	r27, r27
 6ea:	66 27       	eor	r22, r22
 6ec:	77 27       	eor	r23, r23
 6ee:	cb 01       	movw	r24, r22
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__mulsf3>:
 6f4:	0b d0       	rcall	.+22     	; 0x70c <__mulsf3x>
 6f6:	c4 cf       	rjmp	.-120    	; 0x680 <__fp_round>
 6f8:	b5 df       	rcall	.-150    	; 0x664 <__fp_pscA>
 6fa:	28 f0       	brcs	.+10     	; 0x706 <__mulsf3+0x12>
 6fc:	ba df       	rcall	.-140    	; 0x672 <__fp_pscB>
 6fe:	18 f0       	brcs	.+6      	; 0x706 <__mulsf3+0x12>
 700:	95 23       	and	r25, r21
 702:	09 f0       	breq	.+2      	; 0x706 <__mulsf3+0x12>
 704:	a6 cf       	rjmp	.-180    	; 0x652 <__fp_inf>
 706:	ab cf       	rjmp	.-170    	; 0x65e <__fp_nan>
 708:	11 24       	eor	r1, r1
 70a:	ee cf       	rjmp	.-36     	; 0x6e8 <__fp_szero>

0000070c <__mulsf3x>:
 70c:	ca df       	rcall	.-108    	; 0x6a2 <__fp_split3>
 70e:	a0 f3       	brcs	.-24     	; 0x6f8 <__mulsf3+0x4>

00000710 <__mulsf3_pse>:
 710:	95 9f       	mul	r25, r21
 712:	d1 f3       	breq	.-12     	; 0x708 <__mulsf3+0x14>
 714:	95 0f       	add	r25, r21
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	55 1f       	adc	r21, r21
 71a:	62 9f       	mul	r22, r18
 71c:	f0 01       	movw	r30, r0
 71e:	72 9f       	mul	r23, r18
 720:	bb 27       	eor	r27, r27
 722:	f0 0d       	add	r31, r0
 724:	b1 1d       	adc	r27, r1
 726:	63 9f       	mul	r22, r19
 728:	aa 27       	eor	r26, r26
 72a:	f0 0d       	add	r31, r0
 72c:	b1 1d       	adc	r27, r1
 72e:	aa 1f       	adc	r26, r26
 730:	64 9f       	mul	r22, r20
 732:	66 27       	eor	r22, r22
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	66 1f       	adc	r22, r22
 73a:	82 9f       	mul	r24, r18
 73c:	22 27       	eor	r18, r18
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	62 1f       	adc	r22, r18
 744:	73 9f       	mul	r23, r19
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	62 1f       	adc	r22, r18
 74c:	83 9f       	mul	r24, r19
 74e:	a0 0d       	add	r26, r0
 750:	61 1d       	adc	r22, r1
 752:	22 1f       	adc	r18, r18
 754:	74 9f       	mul	r23, r20
 756:	33 27       	eor	r19, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	23 1f       	adc	r18, r19
 75e:	84 9f       	mul	r24, r20
 760:	60 0d       	add	r22, r0
 762:	21 1d       	adc	r18, r1
 764:	82 2f       	mov	r24, r18
 766:	76 2f       	mov	r23, r22
 768:	6a 2f       	mov	r22, r26
 76a:	11 24       	eor	r1, r1
 76c:	9f 57       	subi	r25, 0x7F	; 127
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	8a f0       	brmi	.+34     	; 0x794 <__mulsf3_pse+0x84>
 772:	e1 f0       	breq	.+56     	; 0x7ac <__mulsf3_pse+0x9c>
 774:	88 23       	and	r24, r24
 776:	4a f0       	brmi	.+18     	; 0x78a <__mulsf3_pse+0x7a>
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	91 50       	subi	r25, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	a9 f7       	brne	.-22     	; 0x774 <__mulsf3_pse+0x64>
 78a:	9e 3f       	cpi	r25, 0xFE	; 254
 78c:	51 05       	cpc	r21, r1
 78e:	70 f0       	brcs	.+28     	; 0x7ac <__mulsf3_pse+0x9c>
 790:	60 cf       	rjmp	.-320    	; 0x652 <__fp_inf>
 792:	aa cf       	rjmp	.-172    	; 0x6e8 <__fp_szero>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	ec f3       	brlt	.-6      	; 0x792 <__mulsf3_pse+0x82>
 798:	98 3e       	cpi	r25, 0xE8	; 232
 79a:	dc f3       	brlt	.-10     	; 0x792 <__mulsf3_pse+0x82>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	e7 95       	ror	r30
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	c1 f7       	brne	.-16     	; 0x79c <__mulsf3_pse+0x8c>
 7ac:	fe 2b       	or	r31, r30
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
